<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo基础</title>
    <url>/2021/04/16/direction-for-use/</url>
    <content><![CDATA[<h2 id="Hexo基础"><a href="#Hexo基础" class="headerlink" title="Hexo基础"></a>Hexo基础</h2><h3 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new &lt;title&gt;      <span class="comment"># 创建新文章 目录于 \source\_post 下</span></span><br><span class="line">$ hexo new post &lt;title&gt; <span class="comment"># 创建新文章 目录于 \source\_post 下</span></span><br><span class="line">$ hexo clean</span><br><span class="line">$ hexo server   <span class="comment"># hexo s</span></span><br><span class="line">$ hexo generate <span class="comment"># hexo g</span></span><br><span class="line">$ hexo deploy   <span class="comment"># hexo d</span></span><br></pre></td></tr></table></figure>



<h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">OpenSSL SSL_read: Connection was reset, errno 10054</span><br><span class="line"><span class="comment"># 解决方案</span></span><br><span class="line">$ git config --global http.sslVerify <span class="string">&quot;false&quot;</span></span><br><span class="line"></span><br><span class="line">Failed to connect to github.com port 443: Timed out</span><br><span class="line"><span class="comment"># 解决方案</span></span><br><span class="line"><span class="comment"># 取消代理</span></span><br><span class="line">$ git config --global --<span class="built_in">unset</span> http.proxy</span><br><span class="line">$ git config --global --<span class="built_in">unset</span> https.proxy</span><br><span class="line"></span><br><span class="line">fatal: the remote end hung up unexpectedly</span><br><span class="line">Everything up-to-date</span><br><span class="line"><span class="comment"># 解决方案</span></span><br><span class="line"><span class="comment"># 尚不明确 重新链接网络</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h3 id="配置文件解析"><a href="#配置文件解析" class="headerlink" title="配置文件解析"></a>配置文件解析</h3><p>\hexo\_config.yml hexo站点配置解析，参考：</p>
<p><a href="https://blog.csdn.net/loze/article/details/94209583">https://blog.csdn.net/loze/article/details/94209583</a></p>
<p>\hexo\themes\next\_config.yml next主题配置解析，参考：</p>
<p><a href="https://blog.csdn.net/loze/article/details/94210320">https://blog.csdn.net/loze/article/details/94210320</a></p>
<h3 id="修改页面图标"><a href="#修改页面图标" class="headerlink" title="修改页面图标"></a>修改页面图标</h3><p>放置图标的位置为 \theme\next\sources\images 目录下，需要 small 和 medium 两种。</p>
<p>在 themes\next\_config.yml 的 favicon 处修改</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">favicon:</span></span><br><span class="line">  <span class="attr">small:</span> <span class="string">/images/yjq.ico</span></span><br><span class="line">  <span class="attr">medium:</span> <span class="string">/images/yjq.jpg</span></span><br><span class="line">  <span class="attr">apple_touch_icon:</span> <span class="string">/images/apple-touch-icon-next.png</span></span><br><span class="line">  <span class="attr">safari_pinned_tab:</span> <span class="string">/images/logo.svg</span></span><br><span class="line">  <span class="comment">#android_manifest: /images/manifest.json</span></span><br><span class="line">  <span class="comment">#ms_browserconfig: /images/browserconfig.xml</span></span><br></pre></td></tr></table></figure>



<h3 id="修改menu"><a href="#修改menu" class="headerlink" title="修改menu"></a>修改menu</h3><p>在 themes\next\_config.yml 的 menu 处修改，删除部分 # 以开启功能。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Usage: `Key: /link/ || icon`</span></span><br><span class="line"><span class="comment"># Key is the name of menu item. If the translation for this item is available, the translated text will be loaded, otherwise the Key name will be used. Key is case-senstive.</span></span><br><span class="line"><span class="comment"># Value before `||` delimiter is the target link, value after `||` delimiter is the name of Font Awesome icon.</span></span><br><span class="line"><span class="comment"># When running the site in a subdirectory (e.g. yoursite.com/blog), remove the leading slash from link value (/archives -&gt; archives).</span></span><br><span class="line"><span class="comment"># External url should start with http:// or https://</span></span><br><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="attr">about:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-user</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-tags</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-th</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-archive</span></span><br><span class="line">  <span class="comment">#schedule: /schedule/ || fa fa-calendar</span></span><br><span class="line">  <span class="comment">#sitemap: /sitemap.xml || fa fa-sitemap</span></span><br><span class="line">  <span class="comment">#commonweal: /404/ || fa fa-heartbeat</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># Enable / Disable menu icons / item badges.</span></span><br><span class="line"><span class="attr">menu_settings:</span></span><br><span class="line">  <span class="attr">icons:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">badges:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>



<p>接下来需要创建相关页面：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new page <span class="string">&quot;about&quot;</span></span><br><span class="line">$ hexo new page <span class="string">&quot;tags&quot;</span></span><br><span class="line">$ hexo new page <span class="string">&quot;categories&quot;</span></span><br></pre></td></tr></table></figure>



<p>在生成的 markdown 文件中作出修改：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: about</span><br><span class="line">date: 2019-06-25 19:16:17</span><br><span class="line">type: &quot;about&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p>tag 与 categories 的修改类似。</p>
<h3 id="文章链接"><a href="#文章链接" class="headerlink" title="文章链接"></a>文章链接</h3><p>在 _config.yml 的 # URL 处做出如下修改</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27;</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">https://xiaoq-sd.github.io/</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:urlname/</span></span><br><span class="line"><span class="attr">permalink_defaults:</span></span><br><span class="line">  <span class="attr">urlname:</span> <span class="string">index</span> <span class="comment"># 添加默认</span></span><br><span class="line"><span class="attr">pretty_urls:</span></span><br><span class="line">  <span class="attr">trailing_index:</span> <span class="literal">true</span> <span class="comment"># Set to false to remove trailing &#x27;index.html&#x27; from permalinks</span></span><br><span class="line">  <span class="attr">trailing_html:</span> <span class="literal">true</span> <span class="comment"># Set to false to remove trailing &#x27;.html&#x27; from permalinks</span></span><br></pre></td></tr></table></figure>



<p>默认使用 :title 生成URL，但 title 的名称可能会是中文。</p>
<p>不妨添加一个 urlname，用以生成 URL。</p>
<p>因此，在文章中应添加：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hexo基础</span><br><span class="line">urlname: direction-for-use</span><br><span class="line">---</span><br></pre></td></tr></table></figure>





<h3 id="配置搜索文件"><a href="#配置搜索文件" class="headerlink" title="配置搜索文件"></a>配置搜索文件</h3><p>首先安装插件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>



<p>在 _config.yml 的 # Extensions 后面添加</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 搜索</span></span><br><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure>



<p>在 themes\next\_config.yml 的 Local Search 处修改</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Local Search</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/theme-next/hexo-generator-searchdb</span></span><br><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># 此处修改为 true</span></span><br></pre></td></tr></table></figure>



<h3 id="文章字数统计，阅读时长"><a href="#文章字数统计，阅读时长" class="headerlink" title="文章字数统计，阅读时长"></a>文章字数统计，阅读时长</h3><p>添加插件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm i --save hexo-wordcount</span><br><span class="line">$ npm install hexo-wordcount@2 --save <span class="comment"># 可选？</span></span><br></pre></td></tr></table></figure>



<p>在 themes\next\_config.yml 的 # post wordcount 处修改</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 前面的功能注释掉</span></span><br><span class="line"><span class="comment"># Post wordcount display settings</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/theme-next/hexo-symbols-count-time</span></span><br><span class="line"><span class="comment">#symbols_count_time:</span></span><br><span class="line"><span class="comment">#  separated_meta: true</span></span><br><span class="line"><span class="comment">#  item_text_post: true</span></span><br><span class="line"><span class="comment">#  item_text_total: true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 新添加的内容</span></span><br><span class="line"><span class="comment"># Post wordcount display settings</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/willin/hexo-wordcount</span></span><br><span class="line"><span class="attr">post_wordcount:</span></span><br><span class="line">  <span class="attr">item_text:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">wordcount:</span> <span class="literal">true</span>         <span class="comment"># 单篇 字数统计</span></span><br><span class="line">  <span class="attr">min2read:</span> <span class="literal">true</span>          <span class="comment"># 单篇 阅读时长</span></span><br><span class="line">  <span class="attr">totalcount:</span> <span class="literal">true</span>        <span class="comment"># 网站 字数统计</span></span><br><span class="line">  <span class="attr">separated_meta:</span> <span class="literal">true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="文章摘要"><a href="#文章摘要" class="headerlink" title="文章摘要"></a>文章摘要</h3><p>文章截断方法，在需要截断的地方添加</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">&lt;!--more--&gt;</span></span><br></pre></td></tr></table></figure>



<p>文章首部写概述</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: </span><br><span class="line">date: </span><br><span class="line">description: 概述位置</span><br><span class="line">---</span><br></pre></td></tr></table></figure>



<h3 id="统计访客"><a href="#统计访客" class="headerlink" title="统计访客"></a>统计访客</h3><p>在 themes\next\_config.yml 的 busuanzi_count 处修改</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Show Views / Visitors of the website / page with busuanzi.</span></span><br><span class="line"><span class="comment"># Get more information on http://ibruce.info/2015/04/04/busuanzi</span></span><br><span class="line"><span class="attr">busuanzi_count:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_visitors:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_visitors_icon:</span> <span class="string">fa</span> <span class="string">fa-user</span></span><br><span class="line">  <span class="attr">total_views:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_views_icon:</span> <span class="string">fa</span> <span class="string">fa-eye</span></span><br><span class="line">  <span class="attr">post_views:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">post_views_icon:</span> <span class="string">fa</span> <span class="string">fa-eye</span></span><br></pre></td></tr></table></figure>



<h3 id="加密文章设置"><a href="#加密文章设置" class="headerlink" title="加密文章设置"></a>加密文章设置</h3><p>来自：<a href="https://zhuanlan.zhihu.com/p/113235573">https://zhuanlan.zhihu.com/p/113235573</a></p>
<p>安装插件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install --save hexo-blog-encrypt</span><br></pre></td></tr></table></figure>



<p>在 _config.yml 中添加如下内容：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安全</span></span><br><span class="line"><span class="attr">encrypt:</span> <span class="comment"># hexo-blog-encrypt</span></span><br><span class="line">  <span class="attr">abstract:</span> <span class="string">这篇文章被加密了，需要输入密码查看哦。</span></span><br><span class="line">  <span class="attr">message:</span> <span class="string">您好,</span> <span class="string">这里需要密码.</span></span><br><span class="line">  <span class="attr">tags:</span></span><br><span class="line">  <span class="bullet">-</span> &#123;<span class="attr">name:</span> <span class="string">tagName</span>, <span class="attr">password:</span> <span class="string">密码A</span>&#125;</span><br><span class="line">  <span class="bullet">-</span> &#123;<span class="attr">name:</span> <span class="string">tagName</span>, <span class="attr">password:</span> <span class="string">密码B</span>&#125;</span><br><span class="line">  <span class="attr">template:</span> <span class="string">&lt;div</span> <span class="string">id=&quot;hexo-blog-encrypt&quot;</span> <span class="string">data-wpm=&quot;&#123;&#123;hbeWrongPassMessage&#125;&#125;&quot;</span> <span class="string">data-whm=&quot;&#123;&#123;hbeWrongHashMessage&#125;&#125;&quot;&gt;&lt;div</span> <span class="string">class=&quot;hbe-input-container&quot;&gt;&lt;input</span> <span class="string">type=&quot;password&quot;</span> <span class="string">id=&quot;hbePass&quot;</span> <span class="string">placeholder=&quot;&#123;&#123;hbeMessage&#125;&#125;&quot;</span> <span class="string">/&gt;&lt;label&gt;&#123;&#123;hbeMessage&#125;&#125;&lt;/label&gt;&lt;div</span> <span class="string">class=&quot;bottom-line&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;script</span> <span class="string">id=&quot;hbeData&quot;</span> <span class="string">type=&quot;hbeData&quot;</span> <span class="string">data-hmacdigest=&quot;&#123;&#123;hbeHmacDigest&#125;&#125;&quot;&gt;&#123;&#123;hbeEncryptedData&#125;&#125;&lt;/script&gt;&lt;/div&gt;</span></span><br><span class="line">  <span class="attr">wrong_pass_message:</span> <span class="string">抱歉,</span> <span class="string">这个密码看着不太对,</span> <span class="string">请再试试.</span></span><br><span class="line">  <span class="attr">wrong_hash_message:</span> <span class="string">抱歉,</span> <span class="string">这个文章不能被校验,</span> <span class="string">不过您还是能看看解密后的内容.</span></span><br></pre></td></tr></table></figure>



<p>在所需加密的文章中，文章头部改为如下内容：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: passwordtest</span><br><span class="line">date: 2021-04-20 20:24:13</span><br><span class="line">password: password</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>blogs</tag>
      </tags>
  </entry>
  <entry>
    <title>ACM</title>
    <url>/2021/04/20/ACM-templates/</url>
    <content><![CDATA[<h2 id="Java-amp-C"><a href="#Java-amp-C" class="headerlink" title="Java &amp; C++"></a>Java &amp; C++</h2><h3 id="Java快速I-O"><a href="#Java快速I-O" class="headerlink" title="Java快速I/O"></a>Java快速I/O</h3><h4 id="个人常用模板"><a href="#个人常用模板" class="headerlink" title="个人常用模板"></a>个人常用模板</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.*;</span><br><span class="line"><span class="keyword">import</span> java.rmi.*;</span><br><span class="line"><span class="keyword">import</span> java.security.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.math.*;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> StreamTokenizer in = <span class="keyword">new</span> StreamTokenizer(<span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in)));</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">nextInt</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        in.nextToken();</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>) in.nval;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">double</span> <span class="title">nextDouble</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        in.nextToken();</span><br><span class="line">        <span class="keyword">return</span> in.nval;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">long</span> <span class="title">nextLong</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        in.nextToken();</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">long</span>) in.nval;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">static</span> String <span class="title">next</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        in.nextToken();</span><br><span class="line">        <span class="keyword">return</span> in.sval;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">static</span> PrintWriter out = <span class="keyword">new</span> PrintWriter(<span class="keyword">new</span> OutputStreamWriter(System.out));</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        </span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        out.flush();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="0-1-2-CF上的快速I-O（速度最快？？？）"><a href="#0-1-2-CF上的快速I-O（速度最快？？？）" class="headerlink" title="0.1.2 CF上的快速I/O（速度最快？？？）"></a>0.1.2 CF上的快速I/O（速度最快？？？）</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.*;</span><br><span class="line"><span class="keyword">import</span> java.rmi.*;</span><br><span class="line"><span class="keyword">import</span> java.security.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.math.*;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">	  <span class="comment">/*</span></span><br><span class="line"><span class="comment">	   写代码</span></span><br><span class="line"><span class="comment">	  */</span></span><br><span class="line">        out.flush();</span><br><span class="line">        out.close();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">static</span> FastReader in = <span class="keyword">new</span> FastReader();</span><br><span class="line">    <span class="keyword">static</span> PrintWriter out = <span class="keyword">new</span> PrintWriter(System.out);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">FastReader</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> InputStream mIs;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> curChar, numChars;</span><br><span class="line"> </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">FastReader</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>(System.in);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">FastReader</span><span class="params">(InputStream is)</span> </span>&#123;</span><br><span class="line">            mIs = is;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (numChars == -<span class="number">1</span>) <span class="keyword">throw</span> <span class="keyword">new</span> InputMismatchException();</span><br><span class="line">            <span class="keyword">if</span> (curChar &gt;= numChars) &#123;</span><br><span class="line">                curChar = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    numChars = mIs.read(buf);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> InputMismatchException();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (numChars &lt;= <span class="number">0</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> buf[curChar++];</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">nextLine</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> c = read();</span><br><span class="line">            <span class="keyword">while</span> (isSpaceChar(c)) c = read();</span><br><span class="line">            StringBuilder res = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                res.appendCodePoint(c);</span><br><span class="line">                c = read();</span><br><span class="line">            &#125; <span class="keyword">while</span> (!isEndOfLine(c));</span><br><span class="line">            <span class="keyword">return</span> res.toString();</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> c = read();</span><br><span class="line">            <span class="keyword">while</span> (isSpaceChar(c)) c = read();</span><br><span class="line">            StringBuilder res = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                res.appendCodePoint(c);</span><br><span class="line">                c = read();</span><br><span class="line">            &#125; <span class="keyword">while</span> (!isSpaceChar(c));</span><br><span class="line">            <span class="keyword">return</span> res.toString();</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">nextLong</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> c = read();</span><br><span class="line">            <span class="keyword">while</span> (isSpaceChar(c)) c = read();</span><br><span class="line">            <span class="keyword">int</span> sgn = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">&#x27;-&#x27;</span>) &#123;</span><br><span class="line">                sgn = -<span class="number">1</span>;</span><br><span class="line">                c = read();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">long</span> res = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>) <span class="keyword">throw</span> <span class="keyword">new</span> InputMismatchException();</span><br><span class="line">                res *= <span class="number">10</span>;</span><br><span class="line">                res += c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                c = read();</span><br><span class="line">            &#125; <span class="keyword">while</span> (!isSpaceChar(c));</span><br><span class="line">            <span class="keyword">return</span> res * sgn;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">nextInt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> c = read();</span><br><span class="line">            <span class="keyword">while</span> (isSpaceChar(c)) c = read();</span><br><span class="line">            <span class="keyword">int</span> sgn = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">&#x27;-&#x27;</span>) &#123;</span><br><span class="line">                sgn = -<span class="number">1</span>;</span><br><span class="line">                c = read();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>) <span class="keyword">throw</span> <span class="keyword">new</span> InputMismatchException();</span><br><span class="line">                res *= <span class="number">10</span>;</span><br><span class="line">                res += c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                c = read();</span><br><span class="line">            &#125; <span class="keyword">while</span> (!isSpaceChar(c));</span><br><span class="line">            <span class="keyword">return</span> res * sgn;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">nextDouble</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Double.parseDouble(next());</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSpaceChar</span><span class="params">(<span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> c == <span class="string">&#x27; &#x27;</span> || c == <span class="string">&#x27;\n&#x27;</span> || c == <span class="string">&#x27;\r&#x27;</span> || c == <span class="string">&#x27;\t&#x27;</span> || c == -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEndOfLine</span><span class="params">(<span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> c == <span class="string">&#x27;\n&#x27;</span> || c == <span class="string">&#x27;\r&#x27;</span> || c == -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">scanIntArr</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> li = <span class="number">0</span>; li &lt; arr.length; ++li) &#123;</span><br><span class="line">                arr[li] = nextInt();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">scanLongArr</span><span class="params">(<span class="keyword">long</span>[] arr)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; ++i) &#123;</span><br><span class="line">                arr[i] = nextLong();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shuffle</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = arr.length; i &gt; <span class="number">0</span>; --i) &#123;</span><br><span class="line">                <span class="keyword">int</span> r = (<span class="keyword">int</span>) (Math.random() * i);</span><br><span class="line">                <span class="keyword">int</span> temp = arr[i - <span class="number">1</span>];</span><br><span class="line">                arr[i - <span class="number">1</span>] = arr[r];</span><br><span class="line">                arr[r] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Petr的快速IO"><a href="#Petr的快速IO" class="headerlink" title="Petr的快速IO"></a>Petr的快速IO</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.*;</span><br><span class="line"><span class="keyword">import</span> java.rmi.*;</span><br><span class="line"><span class="keyword">import</span> java.security.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.math.*;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> InputReader in = <span class="keyword">new</span> InputReader(System.in);</span><br><span class="line">    <span class="keyword">static</span> PrintWriter out = <span class="keyword">new</span> PrintWriter(System.out);</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line">        out.close();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">InputReader</span> </span>&#123;</span><br><span class="line">        BufferedReader br;</span><br><span class="line"> </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">InputReader</span><span class="params">(InputStream stream)</span> </span>&#123;</span><br><span class="line">            br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(stream));</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">nextInt</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> c = br.read();</span><br><span class="line">            <span class="keyword">while</span> (c &lt;= <span class="number">32</span>) &#123;</span><br><span class="line">                c = br.read();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">boolean</span> negative = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">&#x27;-&#x27;</span>) &#123;</span><br><span class="line">                negative = <span class="keyword">true</span>;</span><br><span class="line">                c = br.read();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (c &gt; <span class="number">32</span>) &#123;</span><br><span class="line">                x = x * <span class="number">10</span> + c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                c = br.read();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> negative ? -x : x;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">nextLong</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> c = br.read();</span><br><span class="line">            <span class="keyword">while</span> (c &lt;= <span class="number">32</span>) &#123;</span><br><span class="line">                c = br.read();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">boolean</span> negative = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">&#x27;-&#x27;</span>) &#123;</span><br><span class="line">                negative = <span class="keyword">true</span>;</span><br><span class="line">                c = br.read();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">long</span> x = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (c &gt; <span class="number">32</span>) &#123;</span><br><span class="line">                x = x * <span class="number">10</span> + c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                c = br.read();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> negative ? -x : x;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">next</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> c = br.read();</span><br><span class="line">            <span class="keyword">while</span> (c &lt;= <span class="number">32</span>) &#123;</span><br><span class="line">                c = br.read();</span><br><span class="line">            &#125;</span><br><span class="line">            StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            <span class="keyword">while</span> (c &gt; <span class="number">32</span>) &#123;</span><br><span class="line">                sb.append((<span class="keyword">char</span>) c);</span><br><span class="line">                c = br.read();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> sb.toString();</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">nextDouble</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Double.parseDouble(next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="0-1-4-常用快速IO"><a href="#0-1-4-常用快速IO" class="headerlink" title="0.1.4 常用快速IO"></a>0.1.4 常用快速IO</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.*;</span><br><span class="line"><span class="keyword">import</span> java.rmi.*;</span><br><span class="line"><span class="keyword">import</span> java.security.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.math.*;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">static</span> BufferedReader in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">    <span class="keyword">static</span> StringTokenizer tok;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (tok == <span class="keyword">null</span> || !tok.hasMoreTokens())</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                tok = <span class="keyword">new</span> StringTokenizer(in.readLine());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">static</span> String <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        hasNext();</span><br><span class="line">        <span class="keyword">return</span> tok.nextToken();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">static</span> String <span class="title">nextLine</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> in.readLine();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">long</span> <span class="title">nextLong</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Long.parseLong(next());</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">nextInt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Integer.parseInt(next());</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">static</span> PrintWriter out = <span class="keyword">new</span> PrintWriter(<span class="keyword">new</span> OutputStreamWriter(System.out));</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line">        out.flush();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="C-STL"><a href="#C-STL" class="headerlink" title="C++ STL"></a>C++ STL</h3><h4 id="lower-bound-amp-upper-bound"><a href="#lower-bound-amp-upper-bound" class="headerlink" title="lower_bound&amp;upper_bound"></a>lower_bound&amp;upper_bound</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    lower_bound()    返回键值&gt;=给定元素的第一个位置</span></span><br><span class="line"><span class="comment">    upper_bound()     返回键值&gt;给定元素的第一个位置</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//函数版a[1,...,n]中查找元素x</span></span><br><span class="line">    <span class="keyword">int</span> pos = <span class="built_in">lower_bound</span>(a + <span class="number">1</span>, a + <span class="number">1</span> + n, x) - a;</span><br><span class="line"><span class="comment">//pos为第一个大于x的数所在的地址</span></span><br><span class="line"><span class="comment">//若x大于a中所有数，则pos&gt;n;若x小于所有数则pos&lt;=1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//vector版</span></span><br><span class="line">    <span class="keyword">int</span> pos = <span class="built_in">lower_bound</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), x) - v.<span class="built_in">begin</span>();</span><br><span class="line"><span class="comment">//若x不存在，则返回v.begin()或v.end()</span></span><br><span class="line"><span class="comment">//二者得到的pos相减即可得出x在数组中出现的次数</span></span><br></pre></td></tr></table></figure>
<h4 id="priority-queue"><a href="#priority-queue" class="headerlink" title="priority_queue"></a>priority_queue</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//优先队列定义越小的优先级越大的</span></span><br><span class="line"><span class="comment">//注意：后面的两个&#x27;&gt;&#x27;之间要加空格</span></span><br><span class="line">priority_queue&lt;<span class="keyword">int</span>, vector&lt;<span class="keyword">int</span>&gt;, greater&lt;<span class="keyword">int</span>&gt; &gt; q;</span><br></pre></td></tr></table></figure>
<h4 id="set"><a href="#set" class="headerlink" title="set"></a>set</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//访问set中的元素（迭代器）</span></span><br><span class="line">    set&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">    <span class="keyword">for</span> (set&lt;<span class="keyword">int</span>&gt;::iterator it = s.<span class="built_in">begin</span>(); it != s.<span class="built_in">end</span>(); ++it)</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="map"><a href="#map" class="headerlink" title="map"></a>map</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    map中的成员函数：</span></span><br><span class="line"><span class="comment">        clear()清空</span></span><br><span class="line"><span class="comment">        count(x)返回x的出现次数</span></span><br><span class="line"><span class="comment">        empty()返回是否为空</span></span><br><span class="line"><span class="comment">        size()返回元素个数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">假设映射为m[x]=y</span></span><br><span class="line"><span class="comment">    find(x)返回该映射的迭代器</span></span><br><span class="line"><span class="comment">    同样支持lower_bound和upper_bound</span></span><br><span class="line"><span class="comment">    erease(it)删除迭代器it所指向的映射</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    map&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;::iterator it = m.<span class="built_in">find</span>(x);</span><br><span class="line">    m.<span class="built_in">erase</span>(it);<span class="comment">//清除m[x]=y</span></span><br><span class="line">    <span class="comment">//用迭代器访问m中的所有元素</span></span><br><span class="line">    <span class="keyword">for</span> (map&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;::iterator it = m.<span class="built_in">begin</span>(); it != m.<span class="built_in">end</span>(); ++it)</span><br><span class="line">        cout &lt;&lt; it-&gt;first &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; it-&gt;second &lt;&lt; endl;</span><br><span class="line">    <span class="comment">//it-&gt;first表示x，it-&gt;second表示y</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="sort-amp-permutation"><a href="#sort-amp-permutation" class="headerlink" title="sort&amp;permutation"></a>sort&amp;permutation</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">        next_permutation 下一个排列</span></span><br><span class="line"><span class="comment">        prev_permutation 前一个排列</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">        stable_sort() 对给定区间所有元素进行稳定排序</span></span><br><span class="line"><span class="comment">        vector set等均可通过sort进行排序，其默认优先级为：</span></span><br><span class="line"><span class="comment">                [例]</span></span><br><span class="line"><span class="comment">                &#123;-3,-2&#125;</span></span><br><span class="line"><span class="comment">                &#123;-3,-2,-1&#125;</span></span><br><span class="line"><span class="comment">                &#123;1,2,3,4,6&#125;</span></span><br><span class="line"><span class="comment">                &#123;1,2,6,9&#125;</span></span><br><span class="line"><span class="comment">                &#123;2,3,6,7,8&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h4 id="builtin-popcount"><a href="#builtin-popcount" class="headerlink" title="__builtin_popcount"></a>__builtin_popcount</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">__builtin_popcount(x);</span><br></pre></td></tr></table></figure>
<p>精确得到变量x在二进制意义下的1的个数。</p>
<h3 id="C-快速读入"><a href="#C-快速读入" class="headerlink" title="C++快速读入"></a>C++快速读入</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">nc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">char</span> buf[<span class="number">100000</span>], *p1 = buf, *p2 = buf;</span><br><span class="line">    <span class="keyword">return</span> p1 == p2 &amp;&amp; (p2 = (p1 = buf) + <span class="built_in">fread</span>(buf, <span class="number">1</span>, <span class="number">100000</span>, stdin), p1 == p2) ? EOF : *p1++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">bool</span> _read(ll &amp;sum) &#123;</span><br><span class="line">    <span class="keyword">char</span> ch = <span class="built_in">nc</span>();</span><br><span class="line">    <span class="keyword">if</span> (ch == EOF)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (!(ch &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;9&#x27;</span>))ch = <span class="built_in">nc</span>();</span><br><span class="line">    <span class="keyword">while</span> (ch &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;9&#x27;</span>)sum = sum * <span class="number">10</span> + ch - <span class="number">48</span>, ch = <span class="built_in">nc</span>();</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h2><h3 id="矩阵"><a href="#矩阵" class="headerlink" title="矩阵"></a>矩阵</h3><h4 id="高斯消元"><a href="#高斯消元" class="headerlink" title="高斯消元"></a>高斯消元</h4><p>代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">include &lt;bits/stdc++.h&gt;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line">define ll <span class="keyword">long</span> <span class="keyword">long</span></span><br><span class="line">define ull <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span></span><br><span class="line"><span class="function">define __ <span class="title">ios::sync_with_stdio</span><span class="params">(<span class="number">0</span>)</span></span>;cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> ll mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-10</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">double</span> a[<span class="number">110</span>][<span class="number">110</span>];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    __;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n + <span class="number">1</span>; ++j) &#123;</span><br><span class="line">            cin &gt;&gt; a[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> r = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">fabs</span>(a[j][i]) - <span class="built_in">fabs</span>(a[r][i]) &gt;= eps)r = j;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n + <span class="number">1</span>; ++j)</span><br><span class="line">            <span class="built_in">swap</span>(a[i][j], a[r][j]);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">fabs</span>(a[r][r]) &lt;= eps) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;No Solution&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= n + <span class="number">1</span>; ++j) &#123;</span><br><span class="line">            a[i][j] /= a[i][i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i != j) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = i + <span class="number">1</span>; k &lt;= n + <span class="number">1</span>; ++k) &#123;</span><br><span class="line">                    a[j][k] -= a[j][i] * a[i][k];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)cout &lt;&lt; fixed &lt;&lt; <span class="built_in">setprecision</span>(<span class="number">2</span>) &lt;&lt; a[i][n + <span class="number">1</span>] &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="矩阵快速幂"><a href="#矩阵快速幂" class="headerlink" title="矩阵快速幂"></a>矩阵快速幂</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">matrix</span> &#123;</span></span><br><span class="line">    ll num[<span class="number">5</span>][<span class="number">5</span>];</span><br><span class="line">    <span class="keyword">int</span> m, mod;<span class="comment">//需要赋初值或设为全局变量</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">matrix</span>() &#123; <span class="built_in">memset</span>(num, <span class="number">0</span>, <span class="keyword">sizeof</span> num); &#125;</span><br><span class="line"></span><br><span class="line">    matrix <span class="keyword">operator</span>*(<span class="keyword">const</span> matrix &amp;x) &#123;</span><br><span class="line">        matrix c;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= m; ++k) &#123;</span><br><span class="line">                    c.num[i][j] = (c.num[i][j] + num[i][k] * x.num[k][j] + mod) % mod;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    matrix &amp;<span class="keyword">operator</span>=(<span class="keyword">const</span> matrix &amp;x) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j) &#123;</span><br><span class="line">                num[i][j] = x.num[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">matrix <span class="title">pow_mod</span><span class="params">(matrix &amp;x, ll k)</span> </span>&#123;</span><br><span class="line">    matrix ans;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= x.m; ++i) &#123;</span><br><span class="line">        ans.num[i][i] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (k) &#123;</span><br><span class="line">        <span class="keyword">if</span> (k &amp; <span class="number">1</span>)ans = ans * x;</span><br><span class="line">        x = x * x;</span><br><span class="line">        k &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="整除与剩余"><a href="#整除与剩余" class="headerlink" title="整除与剩余"></a>整除与剩余</h3><h4 id="欧几里得算法"><a href="#欧几里得算法" class="headerlink" title="欧几里得算法"></a>欧几里得算法</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">ll <span class="title">gcd</span><span class="params">(ll a, ll b)</span> </span>&#123; <span class="keyword">return</span> b == <span class="number">0</span> ? a : <span class="built_in">gcd</span>(b, a % b); &#125;</span><br></pre></td></tr></table></figure>
<h4 id="扩展欧几里得算法"><a href="#扩展欧几里得算法" class="headerlink" title="扩展欧几里得算法"></a>扩展欧几里得算法</h4><p>求取ax + by = gcd(a, b)</p>
<p>代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">e_gcd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> &amp;x, <span class="keyword">int</span> &amp;y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (b == <span class="number">0</span>) &#123;</span><br><span class="line">        x = <span class="number">1</span>;</span><br><span class="line">        y = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">e_gcd</span>(b, a % b, y, x);</span><br><span class="line">    y -= (a / b) * x;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    解得ax+by=gcd(a,b)的值，特解:</span></span><br><span class="line"><span class="comment">        x0 = x * c / gcd(a, b);</span></span><br><span class="line"><span class="comment">        y0 = y * c / gcd(a, b);</span></span><br><span class="line"><span class="comment">    所有解即为:</span></span><br><span class="line"><span class="comment">        x = x0 + k * b / gcd(a, b);</span></span><br><span class="line"><span class="comment">        y = y0 - k * a / gcd(a, b);</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h4 id="线性乘法逆元"><a href="#线性乘法逆元" class="headerlink" title="线性乘法逆元"></a>线性乘法逆元</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*1 - n的乘法逆元,m为模数*/</span></span><br><span class="line">    ni[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        ni[i] = (m - m / i) * ni[m % i] % m;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="素数"><a href="#素数" class="headerlink" title="素数"></a>素数</h3><h4 id="素数筛法"><a href="#素数筛法" class="headerlink" title="素数筛法"></a>素数筛法</h4><p>线性筛素数O(n)：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"><span class="keyword">int</span> ans[maxn], tot;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_prime</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(vis, <span class="number">1</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(vis));</span><br><span class="line">    vis[<span class="number">0</span>] = vis[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (vis[i]) &#123;</span><br><span class="line">            ++tot;</span><br><span class="line">            ans[tot] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; ((j &lt;= tot) &amp;&amp; (i * ans[j] &lt;= n)); ++j) &#123;</span><br><span class="line">            vis[i * ans[j]] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (i % ans[j] == <span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="素数判定"><a href="#素数判定" class="headerlink" title="素数判定"></a>素数判定</h4><p>素数测试（Miller-Rabin算法）：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">ll <span class="title">mult_mod</span><span class="params">(ll a, ll b, ll c)</span> </span>&#123;</span><br><span class="line">    a %= c;</span><br><span class="line">    b %= c;</span><br><span class="line">    ll ret = <span class="number">0</span>;</span><br><span class="line">    ll tmp = a;</span><br><span class="line">    <span class="keyword">while</span> (b) &#123;</span><br><span class="line">        <span class="keyword">if</span> (b &amp; <span class="number">1</span>) &#123;</span><br><span class="line">            ret += tmp;</span><br><span class="line">            <span class="keyword">if</span> (ret &gt; c) ret -= c;</span><br><span class="line">        &#125;</span><br><span class="line">        tmp &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (tmp &gt; c) tmp -= c;</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">pow_mod</span><span class="params">(ll a, ll b, ll m)</span> </span>&#123;</span><br><span class="line">    ll ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (b) &#123;</span><br><span class="line">        <span class="keyword">if</span> (b &amp; <span class="number">1</span>)ans = ans * a % m;</span><br><span class="line">        a = a * a % m;</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(ll a, ll n, ll x, ll t)</span> </span>&#123;</span><br><span class="line">    ll ret = <span class="built_in">pow_mod</span>(a, x, n);</span><br><span class="line">    ll last = ret;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= t; i++) &#123;</span><br><span class="line">        ret = <span class="built_in">mult_mod</span>(ret, ret, n);</span><br><span class="line">        <span class="keyword">if</span> (ret == <span class="number">1</span> &amp;&amp; last != <span class="number">1</span> &amp;&amp; last != n - <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        last = ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (ret != <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> S = <span class="number">20</span>;<span class="comment">//测试次数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is_prime</span><span class="params">(ll n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">2</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">2</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span> ((n &amp; <span class="number">1</span>) == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    ll x = n - <span class="number">1</span>;</span><br><span class="line">    ll t = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> ((x &amp; <span class="number">1</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">        x &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        t++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">srand</span>(<span class="built_in">time</span>(<span class="literal">NULL</span>));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; S; i++) &#123;</span><br><span class="line">        ll a = <span class="built_in">rand</span>() % (n - <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">check</span>(a, n, x, t)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="质因数分解"><a href="#质因数分解" class="headerlink" title="质因数分解"></a>质因数分解</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	质因数分解：</span></span><br><span class="line"><span class="comment">		n表示待分解的整数</span></span><br><span class="line"><span class="comment">		&amp;tot表示不同质因数的个数</span></span><br><span class="line"><span class="comment">		p[i]表示第i个质因数的值</span></span><br><span class="line"><span class="comment">		q[i]表示第i个质因数的指数</span></span><br><span class="line"><span class="comment">    调用方式 factor(n,p,q,tot);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">factor</span><span class="params">(ll n, ll *p, ll *q, <span class="keyword">int</span> &amp;tot)</span> </span>&#123;</span><br><span class="line">    ll temp, now;</span><br><span class="line">    temp = (<span class="keyword">int</span>) <span class="built_in">sqrt</span>(n);</span><br><span class="line">    tot = <span class="number">0</span>;</span><br><span class="line">    now = n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= temp; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (now % i == <span class="number">0</span>) &#123;</span><br><span class="line">            p[++tot] = i;</span><br><span class="line">            q[tot] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (now % i == <span class="number">0</span>) &#123;</span><br><span class="line">                ++q[tot];</span><br><span class="line">                now /= i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (now != <span class="number">1</span>) &#123;</span><br><span class="line">        p[++tot] = now;</span><br><span class="line">        q[tot] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="欧拉函数"><a href="#欧拉函数" class="headerlink" title="欧拉函数"></a>欧拉函数</h3><h4 id="计算欧拉函数"><a href="#计算欧拉函数" class="headerlink" title="计算欧拉函数"></a>计算欧拉函数</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">euler_phi</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m = (<span class="keyword">int</span>) <span class="built_in">sqrt</span>(n + <span class="number">0.5</span>);</span><br><span class="line">    <span class="keyword">int</span> ans = n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= m; ++i)</span><br><span class="line">        <span class="keyword">if</span> (n % i == <span class="number">0</span>) &#123;</span><br><span class="line">            ans = ans / i * (i - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">while</span> (n % i == <span class="number">0</span>)n /= i;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">if</span> (n &gt; <span class="number">1</span>)ans = ans / n * (n - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="筛法构造欧拉函数表"><a href="#筛法构造欧拉函数表" class="headerlink" title="筛法构造欧拉函数表"></a>筛法构造欧拉函数表</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> phi[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">phi_table</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    phi[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!phi[i]) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt;= n; j += i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!phi[j])phi[j] = j;</span><br><span class="line">                phi[j] = (phi[j] / i) * (i - <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><h4 id="快速幂"><a href="#快速幂" class="headerlink" title="快速幂"></a>快速幂</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">define ll <span class="keyword">long</span> <span class="keyword">long</span></span><br><span class="line"><span class="function">ll <span class="title">pow_mod</span><span class="params">(ll a, ll b, ll m)</span> </span>&#123;</span><br><span class="line">    ll ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (b) &#123;</span><br><span class="line">        <span class="keyword">if</span> (b &amp; <span class="number">1</span>)ans = ans * a % m;</span><br><span class="line">        a = a * a % m;</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="卢卡斯定理"><a href="#卢卡斯定理" class="headerlink" title="卢卡斯定理"></a>卢卡斯定理</h4><p>卢卡斯定理求C(n,m)%p的值<br>注意：<em>p</em>一定为一个不大的素数<br><strong>先调用init(<em>p</em>);计算所有阶乘的值</strong><br>然后lucas(n,m,<em>p</em>)即为所求</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line">ll f[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(ll p)</span> </span>&#123;</span><br><span class="line">    f[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= p; ++i)</span><br><span class="line">        f[i] = f[i - <span class="number">1</span>] * i % p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">pow_mod</span><span class="params">(ll a, ll b, ll mod)</span> </span>&#123;</span><br><span class="line">    ll ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (b &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (b &amp; <span class="number">1</span>)ans = ans * a % mod;</span><br><span class="line">        a = a * a % mod;</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">lucas</span><span class="params">(ll n, ll m, ll p)</span> </span>&#123;</span><br><span class="line">    ll ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (n &amp;&amp; m) &#123;</span><br><span class="line">        ll a = n % p, b = m % p;</span><br><span class="line">        <span class="keyword">if</span> (a &lt; b)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        ans = ans * f[a] % p * <span class="built_in">pow_mod</span>(f[b] * f[a - b] % p, p - <span class="number">2</span>, p) % p;</span><br><span class="line">        n /= p;</span><br><span class="line">        m /= p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="高精度整数（Java）"><a href="#高精度整数（Java）" class="headerlink" title="高精度整数（Java）"></a>高精度整数（Java）</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.math.*;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        Scanner cin = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        BigInteger a, b;</span><br><span class="line">        <span class="comment">//以文件EOF结束</span></span><br><span class="line">        <span class="keyword">while</span> (cin.hasNext()) &#123;</span><br><span class="line">            a = cin.nextBigInteger();</span><br><span class="line">            b = cin.nextBigInteger();</span><br><span class="line"> </span><br><span class="line">            System.out.println(a.add(b)); <span class="comment">//大整数加法</span></span><br><span class="line">            System.out.println(a.subtract(b)); <span class="comment">//大整数减法</span></span><br><span class="line">            System.out.println(a.multiply(b)); <span class="comment">//大整数乘法</span></span><br><span class="line">            System.out.println(a.divide(b)); <span class="comment">//大整数除法(取整)</span></span><br><span class="line">            System.out.println(a.remainder(b)); <span class="comment">//大整数取模</span></span><br><span class="line"> </span><br><span class="line">            <span class="comment">//大整数的比较</span></span><br><span class="line">            <span class="keyword">if</span> (a.compareTo(b) == <span class="number">0</span>) System.out.println(<span class="string">&quot;a == b&quot;</span>); <span class="comment">//大整数a==b</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (a.compareTo(b) &gt; <span class="number">0</span>) System.out.println(<span class="string">&quot;a &gt; b&quot;</span>); <span class="comment">//大整数a&gt;b</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (a.compareTo(b) &lt; <span class="number">0</span>) System.out.println(<span class="string">&quot;a &lt; b&quot;</span>); <span class="comment">//大整数a&lt;b</span></span><br><span class="line"> </span><br><span class="line">            <span class="comment">//大整数绝对值</span></span><br><span class="line">            System.out.println(a.abs()); <span class="comment">//大整数a的绝对值</span></span><br><span class="line"> </span><br><span class="line">            <span class="comment">//大整数的幂</span></span><br><span class="line">            <span class="keyword">int</span> exponent = <span class="number">10</span>;</span><br><span class="line">            System.out.println(a.pow(exponent)); <span class="comment">//大整数a的exponent次幂</span></span><br><span class="line"> </span><br><span class="line">            <span class="comment">//返回大整数十进制的字符串表示</span></span><br><span class="line">            System.out.println(a.toString());</span><br><span class="line"> </span><br><span class="line">            <span class="comment">//返回大整数p进制的字符串表示</span></span><br><span class="line">            <span class="keyword">int</span> p = <span class="number">8</span>;</span><br><span class="line">            System.out.println(a.toString(p));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="斐波那契数列求循环节"><a href="#斐波那契数列求循环节" class="headerlink" title="斐波那契数列求循环节"></a>斐波那契数列求循环节</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//先调用getprime()</span></span><br><span class="line"></span><br><span class="line">define ll <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span></span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">gcd</span><span class="params">(ll a, ll b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> b == <span class="number">0</span> ? a : <span class="built_in">gcd</span>(b, a % b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">lcm</span><span class="params">(ll a, ll b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a / <span class="built_in">gcd</span>(a, b) * b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Matrix</span> &#123;</span></span><br><span class="line">    ll mat[<span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Matrix</span>() &#123; <span class="built_in">memset</span>(mat, <span class="number">0</span>, <span class="keyword">sizeof</span> mat); &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">Matrix <span class="title">mul_M</span><span class="params">(Matrix a, Matrix b, ll mod)</span> </span>&#123;</span><br><span class="line">    Matrix ans;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">2</span>; ++j) &#123;</span><br><span class="line">            ans.mat[i][j] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">2</span>; ++k) &#123;</span><br><span class="line">                ans.mat[i][j] += a.mat[i][k] * b.mat[k][j] % mod;</span><br><span class="line">                <span class="keyword">if</span> (ans.mat[i][j] &gt;= mod)ans.mat[i][j] -= mod;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Matrix <span class="title">pow_M</span><span class="params">(Matrix a, ll n, ll mod)</span> </span>&#123;</span><br><span class="line">    Matrix ans;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i) ans.mat[i][i] = <span class="number">1</span>;</span><br><span class="line">    Matrix tmp = a;</span><br><span class="line">    <span class="keyword">while</span> (n) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &amp; <span class="number">1</span>)ans = <span class="built_in">mul_M</span>(ans, tmp, mod);</span><br><span class="line">        tmp = <span class="built_in">mul_M</span>(tmp, tmp, mod);</span><br><span class="line">        n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">pow_m</span><span class="params">(ll a, ll n, ll mod)</span> </span>&#123;</span><br><span class="line">    ll ans = <span class="number">1</span>, tmp = a % mod;</span><br><span class="line">    <span class="keyword">while</span> (n) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &amp; <span class="number">1</span>)ans = ans * tmp % mod;</span><br><span class="line">        tmp = tmp * tmp % mod;</span><br><span class="line">        n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> prime[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getprime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(prime, <span class="number">0</span>, <span class="keyword">sizeof</span> prime);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= maxn; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!prime[i])prime[++prime[<span class="number">0</span>]] = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= prime[<span class="number">0</span>] &amp;&amp; prime[j] * i &lt;= maxn; ++j) &#123;</span><br><span class="line">            prime[prime[j] * i] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (i % prime[j] == <span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ll factor[<span class="number">100</span>][<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> fatcnt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getfactors</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">    fatcnt = <span class="number">0</span>;</span><br><span class="line">    ll tmp = x;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; prime[i] * prime[i] &lt;= tmp; ++i) &#123;</span><br><span class="line">        factor[fatcnt][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (tmp % prime[i] == <span class="number">0</span>) &#123;</span><br><span class="line">            factor[fatcnt][<span class="number">0</span>] = prime[i];</span><br><span class="line">            <span class="keyword">while</span> (tmp % prime[i] == <span class="number">0</span>) &#123;</span><br><span class="line">                factor[fatcnt][<span class="number">1</span>]++;</span><br><span class="line">                tmp /= prime[i];</span><br><span class="line">            &#125;</span><br><span class="line">            fatcnt++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (tmp != <span class="number">1</span>) &#123;</span><br><span class="line">        factor[fatcnt][<span class="number">0</span>] = tmp;</span><br><span class="line">        factor[fatcnt++][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fatcnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">legendre</span><span class="params">(ll a, ll p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">pow_m</span>(a, (p - <span class="number">1</span>) &gt;&gt; <span class="number">1</span>, p) == <span class="number">1</span>)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> f0 = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> f1 = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">getfib</span><span class="params">(ll n, ll mod)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mod == <span class="number">1</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    Matrix A;</span><br><span class="line">    A.mat[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    A.mat[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    A.mat[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    A.mat[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    Matrix B = <span class="built_in">pow_M</span>(A, n, mod);</span><br><span class="line">    ll ans = f0 * B.mat[<span class="number">0</span>][<span class="number">0</span>] + f1 * B.mat[<span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">return</span> ans % mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ll fac[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">G</span><span class="params">(ll p)</span> </span>&#123;</span><br><span class="line">    ll num;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">legendre</span>(<span class="number">5</span>, p) == <span class="number">1</span>)num = p - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> num = <span class="number">2</span> * (p + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (ll i = <span class="number">1</span>; i * i &lt;= num; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (num % i == <span class="number">0</span>) &#123;</span><br><span class="line">            fac[cnt++] = i;</span><br><span class="line">            <span class="keyword">if</span> (i * i != num) &#123;</span><br><span class="line">                fac[cnt++] = num / i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(fac, fac + cnt);</span><br><span class="line">    ll ans;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cnt; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">getfib</span>(fac[i], p) == f0 &amp;&amp; <span class="built_in">getfib</span>(fac[i] + <span class="number">1</span>, p) == f1) &#123;</span><br><span class="line">            ans = fac[i];</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">find_loop</span><span class="params">(ll n)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">getfactors</span>(n);</span><br><span class="line">    ll ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; fatcnt; ++i) &#123;</span><br><span class="line">        ll record = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (factor[i][<span class="number">0</span>] == <span class="number">2</span>)record = <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (factor[i][<span class="number">0</span>] == <span class="number">3</span>)record = <span class="number">8</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (factor[i][<span class="number">0</span>] == <span class="number">5</span>)record = <span class="number">20</span>;</span><br><span class="line">        <span class="keyword">else</span> record = <span class="built_in">G</span>(factor[i][<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; factor[i][<span class="number">1</span>]; ++j) &#123;</span><br><span class="line">            record *= factor[i][<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        ans = <span class="built_in">lcm</span>(ans, record);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="FFT"><a href="#FFT" class="headerlink" title="FFT"></a>FFT</h4><p>stl complex<double>实现：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">5e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> ld PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"></span><br><span class="line">define cp complex&lt;<span class="keyword">double</span>&gt;</span><br><span class="line"><span class="keyword">int</span> rev[maxn], ans[maxn];</span><br><span class="line">cp A[maxn], B[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FFT</span><span class="params">(cp *a, <span class="keyword">int</span> n, <span class="keyword">int</span> inv)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> bit = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> ((<span class="number">1</span> &lt;&lt; bit) &lt; n)++bit;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">        rev[i] = (rev[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>) | ((i &amp; <span class="number">1</span>) &lt;&lt; (bit - <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">if</span> (i &lt; rev[i])<span class="built_in">swap</span>(a[i], a[rev[i]]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> len = <span class="number">2</span>; len &lt;= n; len &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = len &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="function">cp <span class="title">unit</span><span class="params">(cos(PI / mid), inv * sin(PI / mid))</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i += len) &#123;</span><br><span class="line">            <span class="function">cp <span class="title">omega</span><span class="params">(<span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; mid; ++j, omega *= unit) &#123;</span><br><span class="line">                cp x = a[i + j], y = omega * a[i + j + mid];</span><br><span class="line">                a[i + j] = x + y;</span><br><span class="line">                a[i + j + mid] = x - y;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (inv == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++i)a[i] /= n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// use FFT</span></span><br><span class="line"><span class="comment">// Array A[0...n-1]</span></span><br><span class="line"><span class="comment">// Array B[0...m-1]</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mul</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> bitn = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (bitn &lt; n + m)bitn &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">FFT</span>(A, bitn, <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">FFT</span>(B, bitn, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; bitn; ++i) &#123;</span><br><span class="line">        A[i] = A[i] * B[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">FFT</span>(A, bitn, <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n + m - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">        ans[i] += (<span class="keyword">int</span>) (A[i].<span class="built_in">real</span>() + <span class="number">0.5</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>手写complex：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Complex</span> &#123;</span></span><br><span class="line">    <span class="keyword">double</span> x, y;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Complex</span>(<span class="keyword">double</span> _x = <span class="number">0.0</span>, <span class="keyword">double</span> _y = <span class="number">0.0</span>) &#123;</span><br><span class="line">        x = _x;</span><br><span class="line">        y = _y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Complex <span class="keyword">operator</span>-(<span class="keyword">const</span> Complex &amp;b) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Complex</span>(x - b.x, y - b.y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Complex <span class="keyword">operator</span>+(<span class="keyword">const</span> Complex &amp;b) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Complex</span>(x + b.x, y + b.y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Complex <span class="keyword">operator</span>*(<span class="keyword">const</span> Complex &amp;b) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Complex</span>(x * b.x - y * b.y, x * b.y + y * b.x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> rev[maxn];</span><br><span class="line"></span><br><span class="line">define cp Complex</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FFT</span><span class="params">(cp *a, <span class="keyword">int</span> n, <span class="keyword">int</span> inv)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> bit = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> ((<span class="number">1</span> &lt;&lt; bit) &lt; n)++bit;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">        rev[i] = (rev[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>) | ((i &amp; <span class="number">1</span>) &lt;&lt; (bit - <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">if</span> (i &lt; rev[i])<span class="built_in">swap</span>(a[i], a[rev[i]]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> len = <span class="number">2</span>; len &lt;= n; len &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = len &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="function">cp <span class="title">unit</span><span class="params">(cos(PI / mid), inv * sin(PI / mid))</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i += len) &#123;</span><br><span class="line">            <span class="function">cp <span class="title">omega</span><span class="params">(<span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; mid; ++j, omega = omega * unit) &#123;</span><br><span class="line">                cp x = a[i + j], y = omega * a[i + j + mid];</span><br><span class="line">                a[i + j] = x + y;</span><br><span class="line">                a[i + j + mid] = x - y;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (inv == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++i)a[i].x /= n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="FWT"><a href="#FWT" class="headerlink" title="FWT"></a>FWT</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">5e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> OR = <span class="number">1</span>, AND = <span class="number">2</span>, XOR = <span class="number">3</span>, XNOR = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (x += y) &gt;= mod ? x - mod : x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (x -= y) &lt; <span class="number">0</span> ? x + mod : x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fwt</span><span class="params">(<span class="keyword">int</span> op, <span class="keyword">int</span> *a, <span class="keyword">int</span> n, <span class="keyword">int</span> rev)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> d = <span class="number">1</span>; d &lt; n; d &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> m = d &lt;&lt; <span class="number">1</span>, i = <span class="number">0</span>; i &lt; n; i += m) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; d; ++j) &#123;</span><br><span class="line">                <span class="keyword">int</span> x = a[i + j], y = a[i + j + d];</span><br><span class="line">                <span class="keyword">if</span> (rev == <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (op == OR)a[i + j + d] = <span class="built_in">add</span>(y, x);</span><br><span class="line">                    <span class="keyword">if</span> (op == AND)a[i + j] = <span class="built_in">add</span>(x, y);</span><br><span class="line">                    <span class="keyword">if</span> (op == XOR)a[i + j] = <span class="built_in">add</span>(x, y), a[i + j + d] = <span class="built_in">sub</span>(x, y);</span><br><span class="line">                    <span class="keyword">if</span> (op == XNOR)a[i + j] = <span class="built_in">sub</span>(y, x), a[i + j + d] = <span class="built_in">add</span>(x, y);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    ll inv2 = (mod + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">if</span> (op == OR)a[i + j + d] = <span class="built_in">sub</span>(y, x);</span><br><span class="line">                    <span class="keyword">if</span> (op == AND)a[i + j] = <span class="built_in">sub</span>(x, y);</span><br><span class="line">                    <span class="keyword">if</span> (op == XOR)a[i + j] = <span class="number">1ll</span> * <span class="built_in">add</span>(x, y) * inv2 % mod, a[i + j + d] = <span class="number">1ll</span> * <span class="built_in">sub</span>(x, y) * inv2 % mod;</span><br><span class="line">                    <span class="keyword">if</span> (op == XNOR)a[i + j] = <span class="number">1ll</span> * <span class="built_in">sub</span>(y, x) * inv2 % mod, a[i + j + d] = <span class="number">1ll</span> * <span class="built_in">add</span>(x, y) * inv2 % mod;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> A[maxn], B[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> op, <span class="keyword">int</span> *a, <span class="keyword">int</span> n, <span class="keyword">int</span> *b, <span class="keyword">int</span> m, <span class="keyword">int</span> *ans)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> bitn = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (bitn &lt; (n + m))bitn &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; bitn; ++i)A[i] = a[i], B[i] = b[i];</span><br><span class="line">    <span class="built_in">fwt</span>(op, A, bitn, <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">fwt</span>(op, B, bitn, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; bitn; ++i)ans[i] = <span class="number">1ll</span> * A[i] * B[i] % mod;</span><br><span class="line">    <span class="built_in">fwt</span>(op, ans, bitn, <span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="图论"><a href="#图论" class="headerlink" title="图论"></a>图论</h2><h3 id="Tarjan"><a href="#Tarjan" class="headerlink" title="Tarjan"></a>Tarjan</h3><h4 id="割点"><a href="#割点" class="headerlink" title="割点"></a>割点</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> head[maxn], cnt, dfn[maxn], low[maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> next, to;</span><br><span class="line">&#125; e[maxn * <span class="number">2</span>];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn], cut[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    e[++cnt].to = v;</span><br><span class="line">    e[cnt].next = head[u];</span><br><span class="line">    head[u] = cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cut_bridge</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> fa, <span class="keyword">int</span> dep)</span> </span>&#123;</span><br><span class="line">    vis[cur] = <span class="number">1</span>;</span><br><span class="line">    dfn[cur] = low[cur] = dep;</span><br><span class="line">    <span class="keyword">int</span> children = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[cur]; i; i = e[i].next) &#123;</span><br><span class="line">        <span class="keyword">int</span> x = e[i].to;</span><br><span class="line">        <span class="keyword">if</span> (x != fa &amp;&amp; vis[x] == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (dfn[x] &lt; low[cur])low[cur] = dfn[x];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (vis[x] == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">cut_bridge</span>(x, cur, dep + <span class="number">1</span>);</span><br><span class="line">            children++;</span><br><span class="line">            <span class="keyword">if</span> (low[x] &lt; low[cur])low[cur] = low[x];</span><br><span class="line">            <span class="keyword">if</span> ((fa == <span class="number">-1</span> &amp;&amp; children &gt; <span class="number">1</span>) || (fa != <span class="number">-1</span> &amp;&amp; low[x] &gt;= dfn[cur]))cut[cur] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    vis[cur] = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="边双联通分量"><a href="#边双联通分量" class="headerlink" title="边双联通分量"></a>边双联通分量</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e4</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">data</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> to, next;</span><br><span class="line">&#125; e[maxn * <span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> head[maxn], cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> cur = <span class="number">0</span>, top = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> low[maxn], dfn[maxn], vis[maxn], ans[maxn * <span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    e[++cnt].to = v;</span><br><span class="line">    e[cnt].next = head[u];</span><br><span class="line">    head[u] = cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fa)</span> </span>&#123;</span><br><span class="line">    vis[u] = <span class="number">1</span>;</span><br><span class="line">    dfn[u] = low[u] = ++cur;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; i; i = e[i].next) &#123;</span><br><span class="line">        <span class="keyword">int</span> x = e[i].to;</span><br><span class="line">        <span class="keyword">if</span> (vis[x] == <span class="number">1</span> &amp;&amp; x != fa) &#123;</span><br><span class="line">            <span class="keyword">if</span> (low[u] &gt; dfn[x])low[u] = dfn[x];</span><br><span class="line">            ans[++top] = u;</span><br><span class="line">            ans[++top] = x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (vis[x] == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">tarjan</span>(x, u);</span><br><span class="line">            <span class="keyword">if</span> (low[x] &lt; low[u])low[u] = low[x];</span><br><span class="line">            <span class="keyword">if</span> (low[x] &gt; dfn[u]) &#123;</span><br><span class="line">                ans[++top] = u;</span><br><span class="line">                ans[++top] = x;</span><br><span class="line">                ans[++top] = x;</span><br><span class="line">                ans[++top] = u;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ans[++top] = u;</span><br><span class="line">                ans[++top] = x;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    vis[u] = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//tarjan(i ,-1);</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="点双连通分量"><a href="#点双连通分量" class="headerlink" title="点双连通分量"></a>点双连通分量</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">5010</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, q, head[maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">data</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> to, next;</span><br><span class="line">&#125; e[maxn * <span class="number">4</span>];</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>, top = <span class="number">0</span>, tot = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> dfn[maxn], low[maxn], s[maxn], vis[maxn];</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; color[maxn];</span><br><span class="line"><span class="keyword">int</span> block[maxn];</span><br><span class="line"><span class="keyword">int</span> block_color = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    e[++cnt].to = v;</span><br><span class="line">    e[cnt].next = head[u];</span><br><span class="line">    head[u] = cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bic</span><span class="params">(<span class="keyword">int</span> v, <span class="keyword">int</span> fa, <span class="keyword">int</span> dep)</span> </span>&#123;</span><br><span class="line">    vis[v] = <span class="number">1</span>;</span><br><span class="line">    s[++top] = v;</span><br><span class="line">    block[v] = block_color;</span><br><span class="line">    dfn[v] = low[v] = dep;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[v]; i; i = e[i].next) &#123;</span><br><span class="line">        <span class="keyword">int</span> x = e[i].to;</span><br><span class="line">        <span class="keyword">if</span> (vis[x] == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">bic</span>(x, v, dep + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (low[x] &gt;= dfn[v]) &#123;</span><br><span class="line">                tot++;</span><br><span class="line">                <span class="keyword">do</span> &#123;</span><br><span class="line">                    color[s[top]].<span class="built_in">push_back</span>(tot);</span><br><span class="line">                    top--;</span><br><span class="line">                &#125; <span class="keyword">while</span> (s[top + <span class="number">1</span>] != x);</span><br><span class="line">                <span class="keyword">if</span> (low[x] == dfn[v])color[v].<span class="built_in">push_back</span>(tot);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (low[x] &lt;= low[v])low[v] = low[x];</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (x != fa &amp;&amp; vis[x] == <span class="number">1</span>)low[v] = <span class="built_in">min</span>(low[v], dfn[x]);</span><br><span class="line">    &#125;</span><br><span class="line">    vis[v] = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//bic(x, -1, 0);</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="极大强连通分量"><a href="#极大强连通分量" class="headerlink" title="极大强连通分量"></a>极大强连通分量</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e4</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> cur = <span class="number">0</span>;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; v[maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"><span class="keyword">int</span> low[maxn], dfn[maxn];</span><br><span class="line"><span class="keyword">int</span> s[maxn];</span><br><span class="line"><span class="keyword">int</span> top = <span class="number">0</span>, tot = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    s[++top] = x;</span><br><span class="line">    vis[x] = <span class="number">1</span>;</span><br><span class="line">    dfn[x] = low[x] = ++cur;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; v[x].<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> u = v[x][i];</span><br><span class="line">        <span class="keyword">if</span> (dfn[u] == <span class="number">0</span>)<span class="built_in">tarjan</span>(u);</span><br><span class="line">        <span class="keyword">if</span> (vis[u] &amp;&amp; low[x] &gt; low[u])low[x] = low[u];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (low[x] == dfn[x]) &#123;</span><br><span class="line">        tot = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (s[top + <span class="number">1</span>] != x) &#123;</span><br><span class="line">            top--;</span><br><span class="line">            tot++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h3><h4 id="Dijkstra"><a href="#Dijkstra" class="headerlink" title="Dijkstra"></a>Dijkstra</h4><p>使用堆优化Dijkstra，复杂度O(mlogn)。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">heap</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> d, u;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> heap &amp;b) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> d &gt; b.d;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> to, next, vi;</span><br><span class="line">&#125; e[maxn * <span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> head[maxn], cnt, dis[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z)</span> </span>&#123;</span><br><span class="line">    e[++cnt].to = y;</span><br><span class="line">    e[cnt].next = head[x];</span><br><span class="line">    e[cnt].vi = z;</span><br><span class="line">    head[x] = cnt;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">(<span class="keyword">int</span> src)</span> </span>&#123;</span><br><span class="line">    priority_queue&lt;heap&gt; q;</span><br><span class="line">    <span class="built_in">memset</span>(dis, <span class="number">63</span>, <span class="keyword">sizeof</span> dis);</span><br><span class="line">    <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span> vis);</span><br><span class="line">    dis[src] = <span class="number">0</span>;</span><br><span class="line">    q.<span class="built_in">push</span>((heap) &#123;<span class="number">0</span>, src&#125;);</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        heap uu = q.<span class="built_in">top</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">int</span> x = uu.u;</span><br><span class="line">        <span class="keyword">if</span> (vis[x])<span class="keyword">continue</span>;</span><br><span class="line">        vis[x] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = head[x]; i; i = e[i].next) &#123;</span><br><span class="line">            <span class="keyword">int</span> v = e[i].to;</span><br><span class="line">            <span class="keyword">if</span> (dis[v] &gt; dis[x] + e[i].vi) &#123;</span><br><span class="line">                dis[v] = dis[x] + e[i].vi;</span><br><span class="line">                q.<span class="built_in">push</span>((heap&#123;dis[v], v&#125;));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>邻接矩阵存储，复杂度O(n^2)。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> g[maxn][maxn], dis[maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">(<span class="keyword">int</span> src)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span> vis);</span><br><span class="line">    <span class="built_in">memset</span>(dis, <span class="number">63</span>, <span class="keyword">sizeof</span> dis);</span><br><span class="line">    dis[src] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">-1</span>, m = inf;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">1</span>; y &lt;= n; ++y) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!vis[y] &amp;&amp; dis[y] &lt;= m) &#123;</span><br><span class="line">                x = y;</span><br><span class="line">                m = dis[x];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="number">-1</span>)<span class="keyword">break</span>;</span><br><span class="line">        vis[x] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">1</span>; y &lt;= n; ++y) &#123;</span><br><span class="line">            dis[y] = <span class="built_in">min</span>(dis[y], dis[x] + g[x][y]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="SPFA"><a href="#SPFA" class="headerlink" title="SPFA"></a>SPFA</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">5e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> to, next, vi;</span><br><span class="line">&#125; e[maxm];</span><br><span class="line"><span class="keyword">int</span> head[maxn], dis[maxn], cnt;</span><br><span class="line"><span class="keyword">bool</span> inq[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z)</span> </span>&#123;</span><br><span class="line">    e[++cnt].to = y;</span><br><span class="line">    e[cnt].next = head[x];</span><br><span class="line">    e[cnt].vi = z;</span><br><span class="line">    head[x] = cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">queue&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">spfa</span><span class="params">(<span class="keyword">int</span> src)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dis, <span class="number">63</span>, <span class="keyword">sizeof</span> dis);</span><br><span class="line">    dis[src] = <span class="number">0</span>;</span><br><span class="line">    inq[src] = <span class="number">1</span>;</span><br><span class="line">    q.<span class="built_in">push</span>(src);</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="keyword">int</span> l = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = head[l]; i; i = e[i].next) &#123;</span><br><span class="line">            <span class="keyword">int</span> x = e[i].to;</span><br><span class="line">            <span class="keyword">if</span> (dis[l] + e[i].vi &lt; dis[x]) &#123;</span><br><span class="line">                dis[x] = dis[l] + e[i].vi;</span><br><span class="line">                <span class="keyword">if</span> (!inq[x]) &#123;</span><br><span class="line">                    inq[x] = <span class="number">1</span>;</span><br><span class="line">                    q.<span class="built_in">push</span>(x);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        inq[l] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Floyd-Warshall"><a href="#Floyd-Warshall" class="headerlink" title="Floyd - Warshall"></a>Floyd - Warshall</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*Warshall求传递闭包*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Warshall</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n; k++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">                g[i][j] = g[i][j] | (g[i][k] &amp; g[k][j]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">floyd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n; k++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">                g[i][j] = <span class="built_in">min</span>(g[i][j], g[i][k] + g[k][j]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="次短路"><a href="#次短路" class="headerlink" title="次短路"></a>次短路</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">5e3</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> head[maxn], cnt, n, m, dis[maxn], dis1[maxn];</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; P;</span><br><span class="line">priority_queue&lt;P, vector&lt;P&gt;, greater&lt;P&gt; &gt; q;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> to, next, vi;</span><br><span class="line">&#125; e[maxm * <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z)</span> </span>&#123;</span><br><span class="line">    e[++cnt].to = y;</span><br><span class="line">    e[cnt].next = head[x];</span><br><span class="line">    e[cnt].vi = z;</span><br><span class="line">    head[x] = cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m)) &#123;</span><br><span class="line">        cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(head, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(head));</span><br><span class="line">        <span class="built_in">memset</span>(dis, <span class="number">63</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(dis));</span><br><span class="line">        <span class="built_in">memset</span>(dis1, <span class="number">63</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(dis1));</span><br><span class="line">        <span class="keyword">int</span> x, y, z;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;x, &amp;y, &amp;z);</span><br><span class="line">            <span class="built_in">ins</span>(x, y, z);</span><br><span class="line">            <span class="built_in">ins</span>(y, x, z);</span><br><span class="line">        &#125;</span><br><span class="line">        dis[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        q.<span class="built_in">push</span>(<span class="built_in">P</span>(<span class="number">0</span>, <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            P u = q.<span class="built_in">top</span>();</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">int</span> v = u.second;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = head[v]; i; i = e[i].next) &#123;</span><br><span class="line">                <span class="keyword">if</span> (dis[e[i].to] &gt; u.first + e[i].vi) &#123;</span><br><span class="line">                    dis1[e[i].to] = dis[e[i].to];</span><br><span class="line">                    dis[e[i].to] = u.first + e[i].vi;</span><br><span class="line">                    q.<span class="built_in">push</span>(<span class="built_in">P</span>(dis[e[i].to], e[i].to));</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (dis1[e[i].to] &gt; u.first + e[i].vi &amp;&amp; dis[e[i].to] &lt; u.first + e[i].vi) &#123;</span><br><span class="line">                    dis1[e[i].to] = u.first + e[i].vi;</span><br><span class="line">                    q.<span class="built_in">push</span>(<span class="built_in">P</span>(dis1[e[i].to], e[i].to));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, dis1[n]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="匹配"><a href="#匹配" class="headerlink" title="匹配"></a>匹配</h3><h4 id="匹配的相关概念"><a href="#匹配的相关概念" class="headerlink" title="匹配的相关概念"></a>匹配的相关概念</h4><p> 记图G=(V,E)。<br>1.匹配：（边集）在G中两两没有公共端点的边集合ME。<br>2.边覆盖：G中的任意顶点都至少是F中某条边的端点的边集合FE。<br>3.独立集：（点集）在G中两两互不相连的顶点集合SV。<br>4.顶点覆盖：G中的任意边都有至少一个端点属于S的顶点集合SV。</p>
<p>a.对于不存在孤立点的图，|最大匹配|+|最小边覆盖|=|V|。<br>b.|最大独立集|+|最小顶点覆盖|=|V|。<br>c.对于二分图：|最大匹配|=|最小顶点覆盖|。</p>
<h4 id="朴素匹配"><a href="#朴素匹配" class="headerlink" title="朴素匹配"></a>朴素匹配</h4><p>求取最大匹配。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">bool</span> g[maxn][maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"><span class="keyword">int</span> p[maxn], n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">find_path</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!vis[i] &amp;&amp; g[x][i]) &#123;</span><br><span class="line">            vis[i] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (!p[i] || <span class="built_in">find_path</span>(p[i])) &#123;</span><br><span class="line">                p[i] = x;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//if (find_path(i))tot++;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="匈牙利算法"><a href="#匈牙利算法" class="headerlink" title="匈牙利算法"></a>匈牙利算法</h4><p>邻接矩阵存储。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> g[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> from[maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">match</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (g[x][i] &amp;&amp; vis[i] == <span class="number">0</span>) &#123;</span><br><span class="line">            vis[i] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (from[i] == <span class="number">-1</span> || <span class="built_in">match</span>(from[i])) &#123;</span><br><span class="line">                from[i] = x;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hungry</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tot = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(from, <span class="number">-1</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(from));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(vis));</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">match</span>(i))</span><br><span class="line">            ++tot;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="树"><a href="#树" class="headerlink" title="树"></a>树</h3><h4 id="lca"><a href="#lca" class="headerlink" title="lca"></a>lca</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxh = <span class="number">17</span>;</span><br><span class="line"><span class="keyword">int</span> n, q, tot, head[maxn], f[maxn][<span class="number">25</span>], dep[maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> to, next;</span><br><span class="line">&#125; e[<span class="number">2</span> * maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    e[++tot].to = y, e[tot].next = head[x], head[x] = tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fa)</span> </span>&#123;</span><br><span class="line">    f[x][<span class="number">0</span>] = fa;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; (<span class="number">1</span> &lt;&lt; i) &lt;= dep[x]; i++)</span><br><span class="line">        f[x][i] = f[f[x][i - <span class="number">1</span>]][i - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[x]; i; i = e[i].next) &#123;</span><br><span class="line">        <span class="keyword">int</span> y = e[i].to;</span><br><span class="line">        <span class="keyword">if</span> (y == fa) <span class="keyword">continue</span>;</span><br><span class="line">        dep[y] = dep[x] + <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(y, x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lca</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (dep[x] &gt; dep[y]) <span class="built_in">swap</span>(x, y);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = maxh; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        <span class="keyword">if</span> (dep[f[y][i]] &gt;= dep[x]) y = f[y][i];</span><br><span class="line">    <span class="keyword">if</span> (x == y) <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = maxh; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        <span class="keyword">if</span> (f[x][i] != f[y][i]) x = f[x][i], y = f[y][i];</span><br><span class="line">    <span class="keyword">return</span> f[x][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="生成树Kruskal"><a href="#生成树Kruskal" class="headerlink" title="生成树Kruskal"></a>生成树Kruskal</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> r[maxn], p[maxn], u[maxn], v[maxn], w[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> i, <span class="keyword">const</span> <span class="keyword">int</span> j)</span> </span>&#123; <span class="keyword">return</span> w[i] &lt; w[j]; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">return</span> p[x] == x ? p[x] : p[x] = <span class="built_in">find</span>(p[x]); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;v[i], &amp;u[i], &amp;w[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)p[i] = i;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)r[i] = i;</span><br><span class="line">    <span class="built_in">sort</span>(r + <span class="number">1</span>, r + <span class="number">1</span> + m, cmp);</span><br><span class="line">    <span class="keyword">int</span> tot = <span class="number">0</span>, sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> e = r[i];</span><br><span class="line">        <span class="keyword">int</span> x = <span class="built_in">find</span>(v[e]);</span><br><span class="line">        <span class="keyword">int</span> y = <span class="built_in">find</span>(u[e]);</span><br><span class="line">        <span class="keyword">if</span> (x != y) &#123;</span><br><span class="line">            p[x] = y;</span><br><span class="line">            tot++;</span><br><span class="line">            sum += w[e];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="网络流"><a href="#网络流" class="headerlink" title="网络流"></a>网络流</h3><h4 id="最大流-Ford-Fulkerson实现"><a href="#最大流-Ford-Fulkerson实现" class="headerlink" title="最大流 Ford-Fulkerson实现"></a>最大流 Ford-Fulkerson实现</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> to, next, cap, rev;</span><br><span class="line">&#125; e[<span class="number">10010</span>];</span><br><span class="line"><span class="keyword">bool</span> vis[<span class="number">1010</span>];</span><br><span class="line"><span class="keyword">int</span> head[<span class="number">310</span>], n, m, cnt = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">    e[++cnt].to = t;</span><br><span class="line">    e[cnt].next = head[s];</span><br><span class="line">    head[s] = cnt;</span><br><span class="line">    e[cnt].cap = c;</span><br><span class="line">    e[cnt].rev = cnt + <span class="number">1</span>;</span><br><span class="line">    e[++cnt].to = s;</span><br><span class="line">    e[cnt].next = head[t];</span><br><span class="line">    head[t] = cnt;</span><br><span class="line">    e[cnt].cap = <span class="number">0</span>;</span><br><span class="line">    e[cnt].rev = cnt - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> v, <span class="keyword">int</span> t, <span class="keyword">int</span> f)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (v == t)<span class="keyword">return</span> f;</span><br><span class="line">    vis[v] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[v]; i; i = e[i].next) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!vis[e[i].to] &amp;&amp; e[i].cap &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> d = <span class="built_in">dfs</span>(e[i].to, t, <span class="built_in">min</span>(f, e[i].cap));</span><br><span class="line">            <span class="keyword">if</span> (d &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                e[i].cap -= d;</span><br><span class="line">                e[e[i].rev].cap += d;</span><br><span class="line">                <span class="keyword">return</span> d;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max_flow</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> flow = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(vis));</span><br><span class="line">        <span class="keyword">int</span> f = <span class="built_in">dfs</span>(s, t, <span class="number">1e9</span>);</span><br><span class="line">        <span class="keyword">if</span> (f == <span class="number">0</span>)<span class="keyword">return</span> flow;</span><br><span class="line">        flow += f;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="最大流Dinic实现"><a href="#最大流Dinic实现" class="headerlink" title="最大流Dinic实现"></a>最大流Dinic实现</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e3</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">5e3</span> + <span class="number">10</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> to, next, cap, rev;</span><br><span class="line">&#125; e[maxm];</span><br><span class="line"><span class="keyword">int</span> n, m, cnt = <span class="number">0</span>, head[maxn], dis[maxn], iter[maxn];</span><br><span class="line">queue&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z)</span> </span>&#123;</span><br><span class="line">    e[++cnt].to = y;</span><br><span class="line">    e[cnt].next = head[x];</span><br><span class="line">    head[x] = cnt;</span><br><span class="line">    e[cnt].cap = z;</span><br><span class="line">    e[cnt].rev = cnt + <span class="number">1</span>;</span><br><span class="line">    e[++cnt].to = x;</span><br><span class="line">    e[cnt].next = head[y];</span><br><span class="line">    head[y] = cnt;</span><br><span class="line">    e[cnt].cap = <span class="number">0</span>;</span><br><span class="line">    e[cnt].rev = cnt - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dis, <span class="number">-1</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(dis));</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>())q.<span class="built_in">pop</span>();</span><br><span class="line">    dis[s] = <span class="number">0</span>;</span><br><span class="line">    q.<span class="built_in">push</span>(s);</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="keyword">int</span> u = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; i; i = e[i].next) &#123;</span><br><span class="line">            <span class="keyword">if</span> (e[i].cap &amp;&amp; dis[e[i].to] &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                q.<span class="built_in">push</span>(e[i].to);</span><br><span class="line">                dis[e[i].to] = dis[u] + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> v, <span class="keyword">int</span> t, <span class="keyword">int</span> f)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (v == t)<span class="keyword">return</span> f;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = (iter[v] ? iter[v] : head[v]); i; i = e[i].next, iter[v] = i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (e[i].cap &amp;&amp; dis[v] &lt; dis[e[i].to]) &#123;</span><br><span class="line">            <span class="keyword">int</span> d = <span class="built_in">dfs</span>(e[i].to, t, <span class="built_in">min</span>(f, e[i].cap));</span><br><span class="line">            <span class="keyword">if</span> (d &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                e[i].cap -= d;</span><br><span class="line">                e[e[i].rev].cap += d;</span><br><span class="line">                <span class="keyword">return</span> d;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max_flow</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> flow = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="built_in">bfs</span>(s);</span><br><span class="line">        <span class="keyword">if</span> (dis[t] &lt; <span class="number">0</span>)<span class="keyword">return</span> flow;</span><br><span class="line">        <span class="built_in">memset</span>(iter, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(iter));</span><br><span class="line">        <span class="keyword">int</span> f;</span><br><span class="line">        <span class="keyword">while</span> ((f = <span class="built_in">dfs</span>(s, t, <span class="number">1e9</span>)) &gt; <span class="number">0</span>)</span><br><span class="line">            flow += f;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="费用流"><a href="#费用流" class="headerlink" title="费用流"></a>费用流</h4><p>SPFA实现：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e4</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> cnt, head[maxn], dis[maxn], prevv[maxn], preve[maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> to, next, cap, cost, rev;</span><br><span class="line">&#125; e[maxm];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">    e[++cnt].to = y;</span><br><span class="line">    e[cnt].next = head[x];</span><br><span class="line">    head[x] = cnt;</span><br><span class="line">    e[cnt].cap = z;</span><br><span class="line">    e[cnt].rev = cnt + <span class="number">1</span>;</span><br><span class="line">    e[cnt].cost = c;</span><br><span class="line">    e[++cnt].to = x;</span><br><span class="line">    e[cnt].next = head[y];</span><br><span class="line">    head[y] = cnt;</span><br><span class="line">    e[cnt].cap = <span class="number">0</span>;</span><br><span class="line">    e[cnt].rev = cnt - <span class="number">1</span>;</span><br><span class="line">    e[cnt].cost = -c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">min_cost_flow</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t, <span class="keyword">int</span> f)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (f &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">memset</span>(dis, <span class="number">63</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(dis));</span><br><span class="line">        queue&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">        q.<span class="built_in">push</span>(s);</span><br><span class="line">        dis[s] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="keyword">int</span> v = q.<span class="built_in">front</span>();</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">if</span> (dis[v] &gt; <span class="number">1e8</span>)<span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = head[v]; i; i = e[i].next) &#123;</span><br><span class="line">                <span class="keyword">if</span> (e[i].cap &gt; <span class="number">0</span> &amp;&amp; dis[e[i].to] &gt; dis[v] + e[i].cost) &#123;</span><br><span class="line">                    dis[e[i].to] = dis[v] + e[i].cost;</span><br><span class="line">                    prevv[e[i].to] = v;</span><br><span class="line">                    preve[e[i].to] = i;</span><br><span class="line">                    q.<span class="built_in">push</span>(e[i].to);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (dis[t] &gt; <span class="number">1e8</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">int</span> d = f;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = t; i != s; i = prevv[i]) &#123;</span><br><span class="line">            d = <span class="built_in">min</span>(d, e[preve[i]].cap);</span><br><span class="line">        &#125;</span><br><span class="line">        f -= d;</span><br><span class="line">        ans += d * dis[t];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = t; i != s; i = prevv[i]) &#123;</span><br><span class="line">            e[preve[i]].cap -= d;</span><br><span class="line">            e[e[preve[i]].rev].cap += d;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><h3 id="树状数组"><a href="#树状数组" class="headerlink" title="树状数组"></a>树状数组</h3><h4 id="普通树状数组"><a href="#普通树状数组" class="headerlink" title="普通树状数组"></a>普通树状数组</h4><p> 仅支持单点修改区间查询。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> tree[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lb</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">return</span> x &amp; -x; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tot = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = x; i; i -= <span class="built_in">lb</span>(i)) &#123;</span><br><span class="line">        tot += tree[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> num, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = x; i &lt;= n; i += <span class="built_in">lb</span>(i)) &#123;</span><br><span class="line">        tree[i] += num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="普通二维树状数组"><a href="#普通二维树状数组" class="headerlink" title="普通二维树状数组"></a>普通二维树状数组</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1010</span>;</span><br><span class="line"><span class="keyword">int</span> tree[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lb</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">return</span> x &amp; -x; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tot = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = x; i; i -= <span class="built_in">lb</span>(i)) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = y; j; j -= <span class="built_in">lb</span>(j))</span><br><span class="line">            tot += tree[i][j];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> num, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = x; i &lt;= n; i += <span class="built_in">lb</span>(i)) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = y; j &lt;= m; j += <span class="built_in">lb</span>(j)) &#123;</span><br><span class="line">            tree[i][j] += num;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="树状数组维护区间最大、最小值"><a href="#树状数组维护区间最大、最小值" class="headerlink" title="树状数组维护区间最大、最小值"></a>树状数组维护区间最大、最小值</h4><p>维护区间[1,x]的：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> c[maxn], n, r[maxn], a[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">lb</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">return</span> x &amp; -x; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tot = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (; x; x -= <span class="built_in">lb</span>(x))</span><br><span class="line">        tot = <span class="built_in">max</span>(tot, c[x]);</span><br><span class="line">    <span class="keyword">return</span> tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (; x &lt;= n; x += <span class="built_in">lb</span>(x)) &#123;</span><br><span class="line">        c[x] = <span class="built_in">max</span>(c[x], v);</span><br><span class="line">        <span class="keyword">int</span> t = x - <span class="built_in">lb</span>(x);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> y = x - <span class="number">1</span>; y &amp;&amp; y - <span class="built_in">lb</span>(y) &gt;= t; y -= <span class="built_in">lb</span>(y))</span><br><span class="line">            c[x] = <span class="built_in">max</span>(c[x], c[y]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="线段树"><a href="#线段树" class="headerlink" title="线段树"></a>线段树</h3><h4 id="维护区间最值，区间修改"><a href="#维护区间最值，区间修改" class="headerlink" title="维护区间最值，区间修改"></a>维护区间最值，区间修改</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tree</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> left, right;</span><br><span class="line">    ll sum, add, maxm, minm;</span><br><span class="line">&#125; c[maxn &lt;&lt; <span class="number">2</span>];</span><br><span class="line"> </span><br><span class="line">ll a[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    c[id].left = l;</span><br><span class="line">    c[id].right = r;</span><br><span class="line">    <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">        c[id].maxm = c[id].minm = c[id].sum = a[l];</span><br><span class="line">        c[id].add = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">build</span>(id &lt;&lt; <span class="number">1</span>, l, mid);</span><br><span class="line">    <span class="built_in">build</span>(id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">    c[id].maxm = <span class="built_in">max</span>(c[id &lt;&lt; <span class="number">1</span>].maxm, c[id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].maxm);</span><br><span class="line">    c[id].minm = <span class="built_in">min</span>(c[id &lt;&lt; <span class="number">1</span>].minm, c[id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].minm);</span><br><span class="line">    c[id].sum = c[id &lt;&lt; <span class="number">1</span>].sum + c[id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].sum;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">    c[id &lt;&lt; <span class="number">1</span>].sum += (c[id &lt;&lt; <span class="number">1</span>].right - c[id &lt;&lt; <span class="number">1</span>].left + <span class="number">1</span>) * c[id].add;</span><br><span class="line">    c[id &lt;&lt; <span class="number">1</span>].minm += c[id].add;</span><br><span class="line">    c[id &lt;&lt; <span class="number">1</span>].maxm += c[id].add;</span><br><span class="line">    c[id &lt;&lt; <span class="number">1</span>].add += c[id].add;</span><br><span class="line">    c[id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].sum += (c[id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].right - c[id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].left + <span class="number">1</span>) * c[id].add;</span><br><span class="line">    c[id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].minm += c[id].add;</span><br><span class="line">    c[id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].maxm += c[id].add;</span><br><span class="line">    c[id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].add += c[id].add;</span><br><span class="line">    c[id].add = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> pos, ll v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (c[id].left == c[id].right)c[id].sum = c[id].maxm = c[id].minm = v;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (c[id].left + c[id].right) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (pos &lt;= mid)<span class="built_in">update</span>(id &lt;&lt; <span class="number">1</span>, pos, v);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">update</span>(id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, pos, v);</span><br><span class="line">        c[id].sum = c[id &lt;&lt; <span class="number">1</span>].sum + c[id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].sum;</span><br><span class="line">        c[id].maxm = <span class="built_in">max</span>(c[id &lt;&lt; <span class="number">1</span>].maxm, c[id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].maxm);</span><br><span class="line">        c[id].minm = <span class="built_in">min</span>(c[id &lt;&lt; <span class="number">1</span>].minm, c[id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].minm);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">ll <span class="title">query_max</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (c[id].left == l &amp;&amp; c[id].right == r)<span class="keyword">return</span> c[id].maxm;</span><br><span class="line">    <span class="keyword">int</span> mid = (c[id].left + c[id].right) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (c[id].add)<span class="built_in">pushdown</span>(id);</span><br><span class="line">    <span class="keyword">if</span> (r &lt;= mid)<span class="keyword">return</span> <span class="built_in">query_max</span>(id &lt;&lt; <span class="number">1</span>, l, r);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (l &gt; mid)<span class="keyword">return</span> <span class="built_in">query_max</span>(id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">max</span>(<span class="built_in">query_max</span>(id &lt;&lt; <span class="number">1</span>, l, mid), <span class="built_in">query_max</span>(id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r));</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">ll <span class="title">query_min</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (c[id].left == l &amp;&amp; c[id].right == r)<span class="keyword">return</span> c[id].minm;</span><br><span class="line">    <span class="keyword">int</span> mid = (c[id].left + c[id].right) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (c[id].add)<span class="built_in">pushdown</span>(id);</span><br><span class="line">    <span class="keyword">if</span> (r &lt;= mid)<span class="keyword">return</span> <span class="built_in">query_min</span>(id &lt;&lt; <span class="number">1</span>, l, r);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (l &gt; mid)<span class="keyword">return</span> <span class="built_in">query_min</span>(id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">min</span>(<span class="built_in">query_min</span>(id &lt;&lt; <span class="number">1</span>, l, mid), <span class="built_in">query_min</span>(id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r));</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> l, <span class="keyword">int</span> r, ll v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (c[id].left &gt; r || c[id].right &lt; l)<span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (c[id].left &gt;= l &amp;&amp; c[id].right &lt;= r) &#123;</span><br><span class="line">        c[id].add += v;</span><br><span class="line">        c[id].sum += (c[id].right - c[id].left + <span class="number">1</span>) * v;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (c[id].add)<span class="built_in">pushdown</span>(id);</span><br><span class="line">    <span class="built_in">update</span>(id &lt;&lt; <span class="number">1</span>, l, r, v);</span><br><span class="line">    <span class="built_in">update</span>(id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r, v);</span><br><span class="line">    c[id].sum = c[id &lt;&lt; <span class="number">1</span>].sum + c[id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].sum;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">ll <span class="title">query_sum</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (r &lt; c[id].left || l &gt; c[id].right)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (c[id].left &gt;= l &amp;&amp; c[id].right &lt;= r) &#123;</span><br><span class="line">        <span class="keyword">return</span> c[id].sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (c[id].add)<span class="built_in">pushdown</span>(id);</span><br><span class="line">    ll ans = <span class="built_in">query_sum</span>(id &lt;&lt; <span class="number">1</span>, l, r) + <span class="built_in">query_sum</span>(id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r);</span><br><span class="line">    c[id].sum = c[id &lt;&lt; <span class="number">1</span>].sum + c[id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].sum;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure>
<h4 id="动态开点线段树"><a href="#动态开点线段树" class="headerlink" title="动态开点线段树"></a>动态开点线段树</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = (<span class="number">1e6</span> + <span class="number">10</span>) * <span class="number">51</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ls[maxn], rs[maxn], cnt;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tree</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> left, right, mmin;</span><br><span class="line">&#125; c[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    c[id].left = l;</span><br><span class="line">    c[id].right = r;</span><br><span class="line">    c[id].mmin = inf;</span><br><span class="line">    ls[id] = rs[id] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> pos, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (c[id].left == c[id].right)c[id].mmin = <span class="built_in">min</span>(c[id].mmin, v);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (c[id].left + c[id].right) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (pos &lt;= mid) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ls[id] == <span class="number">0</span>) &#123;</span><br><span class="line">                ls[id] = cnt;</span><br><span class="line">                <span class="built_in">build</span>(cnt, c[id].left, mid);</span><br><span class="line">                ++cnt;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">update</span>(ls[id], pos, v);</span><br><span class="line">            c[id].mmin = <span class="built_in">min</span>(c[id].mmin, c[ls[id]].mmin);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (rs[id] == <span class="number">0</span>) &#123;</span><br><span class="line">                rs[id] = cnt;</span><br><span class="line">                <span class="built_in">build</span>(cnt, mid + <span class="number">1</span>, c[id].right);</span><br><span class="line">                ++cnt;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">update</span>(rs[id], pos, v);</span><br><span class="line">            c[id].mmin = <span class="built_in">min</span>(c[id].mmin, c[rs[id]].mmin);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">query_min</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> ck)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (c[id].left == l &amp;&amp; c[id].right == r)<span class="keyword">return</span> (ck &gt;= c[id].mmin);</span><br><span class="line">    <span class="keyword">if</span> (c[id].mmin &gt; ck)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> mid = (c[id].left + c[id].right) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (r &lt;= mid) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ls[id] != <span class="number">0</span>)<span class="keyword">return</span> <span class="built_in">query_min</span>(ls[id], l, r, ck);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (l &gt; mid) &#123;</span><br><span class="line">        <span class="keyword">if</span> (rs[id] != <span class="number">0</span>)<span class="keyword">return</span> <span class="built_in">query_min</span>(rs[id], l, r, ck);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (ls[id] != <span class="number">0</span> &amp;&amp; <span class="built_in">query_min</span>(ls[id], l, mid, ck))<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (rs[id] != <span class="number">0</span> &amp;&amp; <span class="built_in">query_min</span>(rs[id], mid + <span class="number">1</span>, r, ck))<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><h3 id="常见线性模型"><a href="#常见线性模型" class="headerlink" title="常见线性模型"></a>常见线性模型</h3><h4 id="LIS-O-nlogn"><a href="#LIS-O-nlogn" class="headerlink" title="LIS(O(nlogn))"></a>LIS(O(nlogn))</h4><p> 采用树状数组优化。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> c[maxn], n, r[maxn], a[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">lb</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">return</span> x &amp; -x; &#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tot = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (; x; x -= <span class="built_in">lb</span>(x))</span><br><span class="line">        tot = <span class="built_in">max</span>(tot, c[x]);</span><br><span class="line">    <span class="keyword">return</span> tot;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (; x &lt;= n; x += <span class="built_in">lb</span>(x)) &#123;</span><br><span class="line">        c[x] = <span class="built_in">max</span>(c[x], v);</span><br><span class="line"><span class="comment">//        int t = x - lb(x);</span></span><br><span class="line"><span class="comment">//        for (int y = x - 1; y &amp;&amp; y - lb(y) &gt;= t; y -= lb(y))</span></span><br><span class="line"><span class="comment">//            c[x] = max(c[x], c[y]);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">const</span> <span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> i, <span class="keyword">const</span> <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a[i] == a[j] ? i &lt; j : a[i] &lt; a[j];</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    __;</span><br><span class="line">    <span class="keyword">int</span> _;</span><br><span class="line">    cin &gt;&gt; _;</span><br><span class="line">    <span class="keyword">while</span> (_--) &#123;</span><br><span class="line">        cin &gt;&gt; n;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            cin &gt;&gt; a[i];</span><br><span class="line">            r[i] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sort</span>(r + <span class="number">1</span>, r + <span class="number">1</span> + n, cmp);</span><br><span class="line">        <span class="built_in">memset</span>(c, <span class="number">0</span>, <span class="keyword">sizeof</span> c);</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">            <span class="keyword">int</span> i = r[j];</span><br><span class="line">            <span class="keyword">int</span> tmp = <span class="built_in">query</span>(i - <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">update</span>(i, tmp);</span><br><span class="line">            ans = <span class="built_in">max</span>(ans, tmp);</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="LCS"><a href="#LCS" class="headerlink" title="LCS"></a>LCS</h4><p>复杂度O(nlogn)</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">include &lt;bits/stdc++.h&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">define ll <span class="keyword">long</span> <span class="keyword">long</span></span><br><span class="line">define ull <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span></span><br><span class="line"><span class="function">define __ <span class="title">ios::sync_with_stdio</span><span class="params">(<span class="number">0</span>)</span></span>;cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n, a[maxn], b[maxn], c[maxn];</span><br><span class="line"><span class="keyword">int</span> mp[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">lb</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">return</span> x &amp; -x; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tot = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (; x; x -= <span class="built_in">lb</span>(x))</span><br><span class="line">        tot = <span class="built_in">max</span>(tot, c[x]);</span><br><span class="line">    <span class="keyword">return</span> tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (; x &lt;= n; x += <span class="built_in">lb</span>(x)) &#123;</span><br><span class="line">        c[x] = <span class="built_in">max</span>(c[x], v);</span><br><span class="line"><span class="comment">//        int t = x - lb(x);</span></span><br><span class="line"><span class="comment">//        for (int y = x - 1; y &amp;&amp; y - lb(y) &gt;= t; y -= lb(y))</span></span><br><span class="line"><span class="comment">//            c[x] = max(c[x], c[y]);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    __;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) cin &gt;&gt; a[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        cin &gt;&gt; b[i];</span><br><span class="line">        mp[b[i]] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) b[i] = mp[a[i]];</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> tmp = <span class="built_in">query</span>(b[i] - <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">update</span>(b[i], tmp);</span><br><span class="line">        ans = <span class="built_in">max</span>(ans, tmp);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="LCIS"><a href="#LCIS" class="headerlink" title="LCIS"></a>LCIS</h4><p>复杂度O(n*m)</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> a[maxn], b[maxn];</span><br><span class="line"><span class="keyword">int</span> f[maxn][maxn];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    __;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        cin &gt;&gt; b[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> tot = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j) &#123;</span><br><span class="line">            f[i][j] = a[i] == b[j] ? tot + <span class="number">1</span> : f[i - <span class="number">1</span>][j];</span><br><span class="line">            <span class="keyword">if</span> (b[j] &lt; a[i])tot = <span class="built_in">max</span>(tot, f[i - <span class="number">1</span>][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)ans = <span class="built_in">max</span>(ans, f[n][i]);</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="石子合并问题"><a href="#石子合并问题" class="headerlink" title="石子合并问题"></a>石子合并问题</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">include &lt;bits/stdc++.h&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">define ll <span class="keyword">long</span> <span class="keyword">long</span></span><br><span class="line">define ull <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span></span><br><span class="line"><span class="function">define __ <span class="title">ios::sync_with_stdio</span><span class="params">(<span class="number">0</span>)</span></span>;cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1000000000</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">201</span>];</span><br><span class="line"><span class="keyword">int</span> f[<span class="number">201</span>][<span class="number">201</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> sum[<span class="number">201</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    __;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">        sum[i] = sum[i - <span class="number">1</span>] + a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        a[i + n] = a[i];</span><br><span class="line">        sum[i + n] = sum[i + n - <span class="number">1</span>] + a[i + n];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>(f, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(f));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt; n; k++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i + k &lt;= <span class="number">2</span> * n; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> r = i + k;</span><br><span class="line">            f[i][r] = inf;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; r; j++)f[i][r] = <span class="built_in">min</span>(f[i][r], sum[r] - sum[i - <span class="number">1</span>] + f[i][j] + f[j + <span class="number">1</span>][r]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> tot = inf;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)tot = <span class="built_in">min</span>(tot, f[i][i + n - <span class="number">1</span>]);</span><br><span class="line">    cout &lt;&lt; tot &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">memset</span>(f, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(f));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt; n; k++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i + k &lt;= <span class="number">2</span> * n; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> r = i + k;</span><br><span class="line">            f[i][r] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; r; j++)f[i][r] = <span class="built_in">max</span>(f[i][r], sum[r] - sum[i - <span class="number">1</span>] + f[i][j] + f[j + <span class="number">1</span>][r]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    tot = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)tot = <span class="built_in">max</span>(tot, f[i][i + n - <span class="number">1</span>]);</span><br><span class="line">    cout &lt;&lt; tot;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="树型dp"><a href="#树型dp" class="headerlink" title="树型dp"></a>树型dp</h3><p>森林转二叉树：<br>题意：给你n门课程，每门课有其先修课和学分。求选m门课程的最大学分。（森林转二叉树）</p>
<p>树形dp。关键是存树的方式。</p>
<p>在森林上找多个包含树根的连通块，使所有点的权值最大。</p>
<p>用二叉树存储，定义两个数组head和next，其中head[i]表示节点i的第一个儿子节点，next[i]表示节点i的兄弟节点。</p>
<p>若以知一个节点的父亲，则插入该节点的代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (head[fa] == <span class="number">0</span>)head[fa] = i;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">int</span> t = head[fa];</span><br><span class="line">    <span class="keyword">while</span> (next[t] != <span class="number">0</span>)t = next[t];</span><br><span class="line">    next[t] = i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>dp方程：</p>
<p>$f[c][s]$ 表示在二叉树中以c为根的子树中取s个节点的最大权值，其中这s个节点均联通。</p>
<p>$f[c][s] = a[c] + max(f[head[c]][i], f[next[c]][s - 1 - i]);$</p>
<p>由于二叉树中节点c的右节点实际上与c是兄弟关系，故$f[c][s]$的值可以不包含节点c，故还应保证</p>
<p>$f[c][s] = max(f[c][s], f[next[c]][s]);$</p>
<p>代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">include &lt;bits/stdc++.h&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">define ll <span class="keyword">long</span> <span class="keyword">long</span></span><br><span class="line">define ull <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span></span><br><span class="line"><span class="function">define __ <span class="title">ios::sync_with_stdio</span><span class="params">(<span class="number">0</span>)</span></span>;cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">1001</span>];</span><br><span class="line"><span class="keyword">int</span> head[<span class="number">1001</span>], nxt[<span class="number">1001</span>];</span><br><span class="line"><span class="keyword">int</span> f[<span class="number">1001</span>][<span class="number">1001</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dp</span><span class="params">(<span class="keyword">int</span> c, <span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s == <span class="number">0</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="number">0</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (f[c][s] != <span class="number">0</span>)<span class="keyword">return</span> f[c][s];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s; i++)f[c][s] = <span class="built_in">max</span>(f[c][s], a[c] + <span class="built_in">dp</span>(head[c], i) + <span class="built_in">dp</span>(nxt[c], s - <span class="number">1</span> - i));</span><br><span class="line">    f[c][s] = <span class="built_in">max</span>(f[c][s], <span class="built_in">dp</span>(nxt[c], s));</span><br><span class="line">    <span class="keyword">return</span> f[c][s];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    __;</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> fa;</span><br><span class="line">        cin &gt;&gt; fa;</span><br><span class="line">        <span class="keyword">if</span> (head[fa] == <span class="number">0</span>)head[fa] = i;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> t = head[fa];</span><br><span class="line">            <span class="keyword">while</span> (nxt[t] != <span class="number">0</span>)t = nxt[t];</span><br><span class="line">            nxt[t] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">dp</span>(head[<span class="number">0</span>], m);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="单调栈"><a href="#单调栈" class="headerlink" title="单调栈"></a>单调栈</h3><p> 手动实现版：</p>
<p>例题大意：给出N个矩形和他们的高和宽 现在把他们宽放在x轴上对齐，请问现在最大矩形面积。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Data</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> left, right, height;</span><br><span class="line">&#125; s[maxn], a[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    __;</span><br><span class="line">    <span class="keyword">while</span> (cin &gt;&gt; n) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">-1</span>)<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">0</span>, w, h;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            cin &gt;&gt; w &gt;&gt; h;</span><br><span class="line">            a[i].height = h;</span><br><span class="line">            a[i].left = l;</span><br><span class="line">            l += w;</span><br><span class="line">            a[i].right = l;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>, top = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">while</span> (top &amp;&amp; s[top].height &gt; a[i].height) &#123;</span><br><span class="line">                Data p = s[top--];</span><br><span class="line">                <span class="keyword">if</span> (top == <span class="number">0</span>) &#123;</span><br><span class="line">                    ans = <span class="built_in">max</span>(ans, p.height * (a[i].left));</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    ans = <span class="built_in">max</span>(ans, p.height * (a[i].left - s[top].right));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            Data x;</span><br><span class="line">            x.left = a[i].left;</span><br><span class="line">            x.right = a[i].right;</span><br><span class="line">            x.height = a[i].height;</span><br><span class="line">            s[++top] = a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (top) &#123;</span><br><span class="line">            Data p = s[top--];</span><br><span class="line">            <span class="keyword">if</span> (top == <span class="number">0</span>) &#123;</span><br><span class="line">                ans = <span class="built_in">max</span>(ans, p.height * (a[n].right));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ans = <span class="built_in">max</span>(ans, p.height * (a[n].right - s[top].right));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>STL写法：<br>例题：给出直方图上n个矩形的高度，求最大面积。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">stack&lt;pair&lt;ll, ll&gt; &gt; s;</span><br><span class="line">ll n, a[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    __;</span><br><span class="line">    <span class="keyword">while</span> (cin &gt;&gt; n) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            cin &gt;&gt; a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        ll ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">while</span> (!s.<span class="built_in">empty</span>() &amp;&amp; s.<span class="built_in">top</span>().first &gt; a[i]) &#123;</span><br><span class="line">                pair&lt;ll, ll&gt; p = s.<span class="built_in">top</span>();</span><br><span class="line">                s.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">if</span> (s.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">                    ans = <span class="built_in">max</span>(ans, p.first * (i - <span class="number">1</span>));</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    ans = <span class="built_in">max</span>(ans, (i - <span class="number">1</span> - s.<span class="built_in">top</span>().second) * p.first);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            s.<span class="built_in">push</span>(pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;(a[i], i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!s.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            pair&lt;ll, ll&gt; p = s.<span class="built_in">top</span>();</span><br><span class="line">            s.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">if</span> (s.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">                ans = <span class="built_in">max</span>(ans, n * p.first);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ans = <span class="built_in">max</span>(ans, (n - s.<span class="built_in">top</span>().second) * p.first);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>不使用栈，直接用数组记录。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">2001</span>][<span class="number">2001</span>], h[<span class="number">2001</span>][<span class="number">2001</span>];</span><br><span class="line"><span class="keyword">int</span> l[<span class="number">2002</span>][<span class="number">2001</span>], r[<span class="number">2002</span>][<span class="number">2002</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;m, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i][j]);</span><br><span class="line">            <span class="keyword">if</span> (a[i][j]) &#123;</span><br><span class="line">                h[i][j] = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (h[i - <span class="number">1</span>][j])h[i][j] += h[i - <span class="number">1</span>][j];</span><br><span class="line">            &#125; <span class="keyword">else</span> h[i][j] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (h[i][j]) &#123;</span><br><span class="line">                <span class="keyword">int</span> t = j - <span class="number">1</span>;</span><br><span class="line">                l[i][j] = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">while</span> (t &gt;= <span class="number">1</span> &amp;&amp; h[i][j] &lt;= h[i][t]) &#123;</span><br><span class="line">                    l[i][j] += l[i][t];</span><br><span class="line">                    t -= l[i][t];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = m; j &gt;= <span class="number">1</span>; j--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (h[i][j]) &#123;</span><br><span class="line">                <span class="keyword">int</span> t = j + <span class="number">1</span>;</span><br><span class="line">                r[i][j] = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">while</span> (t &lt;= m &amp;&amp; h[i][j] &lt;= h[i][t]) &#123;</span><br><span class="line">                    r[i][j] += r[i][t];</span><br><span class="line">                    t += r[i][t];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> tot = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">            tot = <span class="built_in">max</span>(tot, (l[i][j] + r[i][j] - <span class="number">1</span>) * h[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, tot);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="单调队列"><a href="#单调队列" class="headerlink" title="单调队列"></a>单调队列</h3><p>手动实现版：</p>
<p>r - 2 * sum[r] - ((l - 1) - 2 * sum[l-1]) + x ，维护对于每个r，只需找出最小的((l - 1) - 2 * sum[l - 1])即可。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    sum[i] = sum[i - <span class="number">1</span>] + c[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line"><span class="keyword">while</span> (m--) &#123;</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">1</span>, r = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    q[++r] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">while</span> (l &lt;= r &amp;&amp; q[r] - sum[q[r]] * <span class="number">2</span> &gt; i - sum[i] * <span class="number">2</span>)</span><br><span class="line">            --r;</span><br><span class="line">        q[++r] = i;</span><br><span class="line">        <span class="keyword">while</span> (l &lt;= r &amp;&amp; sum[q[r]] - sum[q[l]] &gt; x)</span><br><span class="line">            ++l;</span><br><span class="line">        ans = <span class="built_in">max</span>(ans, q[r] - <span class="number">2</span> * sum[q[r]] - (q[l] - <span class="number">2</span> * sum[q[l]]) + x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>STL实现版：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">ll sum[maxn], b[maxn];</span><br><span class="line">list&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">dp</span><span class="params">(<span class="keyword">int</span> len, <span class="keyword">int</span> cnt)</span> </span>&#123;</span><br><span class="line">    q.<span class="built_in">clear</span>();</span><br><span class="line">    ll ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt; ++i) &#123;</span><br><span class="line">        sum[i] = sum[i - <span class="number">1</span>] + b[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt; ++i) &#123;</span><br><span class="line">        <span class="keyword">while</span> (!q.<span class="built_in">empty</span>() &amp;&amp; sum[q.<span class="built_in">front</span>()] &gt; sum[i])</span><br><span class="line">            q.<span class="built_in">pop_front</span>();</span><br><span class="line">        q.<span class="built_in">push_front</span>(i);</span><br><span class="line">        <span class="keyword">while</span> (!q.<span class="built_in">empty</span>() &amp;&amp; i - len &gt; q.<span class="built_in">back</span>())</span><br><span class="line">            q.<span class="built_in">pop_back</span>();</span><br><span class="line">        <span class="keyword">if</span> (i &gt; <span class="number">1</span>)ans = <span class="built_in">max</span>(ans, sum[i] - sum[q.<span class="built_in">back</span>()]);</span><br><span class="line">        <span class="keyword">else</span> ans = <span class="built_in">max</span>(ans, sum[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="数位dp"><a href="#数位dp" class="headerlink" title="数位dp"></a>数位dp</h3><p>Windy数：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> ll mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">100</span>];</span><br><span class="line">ll f[<span class="number">101</span>][<span class="number">11</span>];</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">dp</span><span class="params">(<span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (len == <span class="number">0</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    ll ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; a[len]; ++i) &#123;</span><br><span class="line">        ans += f[len][i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = len - <span class="number">1</span>; i; --i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; a[i]; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">abs</span>(j - a[i + <span class="number">1</span>]) &gt;= <span class="number">2</span>)ans += f[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">abs</span>(a[i] - a[i + <span class="number">1</span>]) &lt; <span class="number">2</span>) &#123;</span><br><span class="line">            ans--;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = len - <span class="number">1</span>; i; --i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">9</span>; ++j) &#123;</span><br><span class="line">            ans += f[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">solve</span><span class="params">(ll t)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pos = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (t) &#123;</span><br><span class="line">        a[++pos] = (<span class="keyword">int</span>) (t % <span class="number">10</span>);</span><br><span class="line">        t /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">dp</span>(pos);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    __;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">9</span>; ++i)</span><br><span class="line">        f[<span class="number">1</span>][i] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= <span class="number">15</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= <span class="number">9</span>; ++j) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= <span class="number">9</span>; ++k) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">abs</span>(j - k) &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">                    f[i][j] += f[i - <span class="number">1</span>][k];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ll a, b;</span><br><span class="line">    cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">solve</span>(b) - <span class="built_in">solve</span>(a - <span class="number">1</span>) &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="四边形不等式优化"><a href="#四边形不等式优化" class="headerlink" title="四边形不等式优化"></a>四边形不等式优化</h3><p>$f[i][j]=m i n{ f[i][k] + f[k+1][j] }+w[i][j]$</p>
<ul>
<li>若$w[a][c]+w[b][d]\leq w[b][c]+w[a][d]\ (a&lt;b&lt;c&lt;d)$则称w满足四边形不等式</li>
<li>w满足四边形不等式，当且仅当$w[i][j]+w[i+1][j+1]\leq w[i+1][j]+w[i][j+1]$</li>
<li>若$w[a][b]&lt;=w[a’][b’]\ ([a,\ b]\subset [a’,\ b’])$则称w关于区间包含关系单调</li>
<li>如果w满足四边形不等式且关于区间包含关系单调，则f也满足四边形不等式</li>
<li>如果f满足四边形不等式，则决策点$p[i][j-1]\leq p[i][j]\leq p[i+1][j]$，此时若把p看作一个矩阵则p在每一行和每一列上上单调不降</li>
</ul>
<p>此时k的枚举由$[i,\ j]$变为了$[p[i][j-1],\ p[i+1][j]]$。只要将p矩阵打印出来观察每行每列是否单调即可，如果单调说明方程可以四边形优化。 </p>
<h2 id="其它问题"><a href="#其它问题" class="headerlink" title="其它问题"></a>其它问题</h2><h3 id="星期计算"><a href="#星期计算" class="headerlink" title="星期计算"></a>星期计算</h3><p>只适用于1582年之后的日期。</p>
<p>计算星期几的公式：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Day</span><span class="params">(<span class="keyword">int</span> y, <span class="keyword">int</span> m, <span class="keyword">int</span> d)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (m == <span class="number">1</span> || m == <span class="number">2</span>) &#123;</span><br><span class="line">        m += <span class="number">12</span>;</span><br><span class="line">        --y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (d + <span class="number">2</span> * m + <span class="number">3</span> * (m + <span class="number">1</span>) / <span class="number">5</span> + y + y / <span class="number">4</span> - y / <span class="number">100</span> + y / <span class="number">400</span>) % <span class="number">7</span> + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>求得的结果1~7分别表示星期一到星期日。</p>
<h3 id="逆序对"><a href="#逆序对" class="headerlink" title="逆序对"></a>逆序对</h3><p>树状数组写法：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n, r[maxn];</span><br><span class="line">ll a[maxn], c[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lb</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">return</span> x &amp; -x; &#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">ll <span class="title">read</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    ll tot = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = x; i; i -= <span class="built_in">lb</span>(i))tot += c[i];</span><br><span class="line">    <span class="keyword">return</span> tot;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(ll num, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = x; i &lt;= n; i += <span class="built_in">lb</span>(i))</span><br><span class="line">        c[i] += num;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">const</span> <span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> i, <span class="keyword">const</span> <span class="keyword">int</span> j)</span> </span>&#123; <span class="keyword">return</span> i == j ? i &lt; j : a[i] &lt; a[j]; &#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    __;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="built_in">memset</span>(c, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(c));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">        r[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(r + <span class="number">1</span>, r + <span class="number">1</span> + n, cmp);</span><br><span class="line">    ll tot = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> x = r[i];</span><br><span class="line">        tot += <span class="built_in">read</span>(n) - <span class="built_in">read</span>(x);</span><br><span class="line">        <span class="built_in">add</span>(<span class="number">1</span>, x);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; tot &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>归并排序写法：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">ll <span class="title">inversed_pair</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    ll sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> mid = (n &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    sum += <span class="built_in">inversed_pair</span>(a, mid);</span><br><span class="line">    sum += <span class="built_in">inversed_pair</span>(a + mid, n - mid);</span><br><span class="line">    <span class="keyword">int</span> *b = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">    <span class="built_in">memcpy</span>(b, a, n * <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">int</span>));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i1 = <span class="number">0</span>, i2 = mid, i = <span class="number">0</span>; i1 &lt; mid || i2 &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i2 == n) &#123;</span><br><span class="line">            a[i] = b[i1];</span><br><span class="line">            ++i1;</span><br><span class="line">            sum += i2 - mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (i1 == mid) &#123;</span><br><span class="line">            a[i] = b[i2];</span><br><span class="line">            ++i2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (b[i1] &lt; b[i2]) &#123;</span><br><span class="line">            a[i] = b[i1];</span><br><span class="line">            ++i1;</span><br><span class="line">            sum += i2 - mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            a[i] = b[i2];</span><br><span class="line">            ++i2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">delete</span>[] b;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="三分"><a href="#三分" class="headerlink" title="三分"></a>三分</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (l + eps &lt; r) &#123;</span><br><span class="line">    <span class="keyword">double</span> lm = l + (r - l) / <span class="number">3.0</span>, rm = l + <span class="number">2.0</span> * (r - l) / <span class="number">3.0</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">dis</span>(lm) &gt; <span class="built_in">dis</span>(rm))</span><br><span class="line">        r = rm;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        l = lm;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="母函数"><a href="#母函数" class="headerlink" title="母函数"></a>母函数</h3><p>有n个重量为1g的砝码，n/2个重量为2g的砝码，…，1个重量为ng的砝码，问称取ng的物品有多少种放砝码的方法。</p>
<p>$(1 + x + x^2 + x^3 + … + x^n) * (1 + x^2 + x^4 + … + x^n) * … * (1 + x^n)$</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> c1[maxn], c2[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    __;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span> (cin &gt;&gt; n) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            c1[i] = <span class="number">1</span>;</span><br><span class="line">            c2[i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k + j &lt;= n; k += i) &#123;</span><br><span class="line">                    c2[j + k] += c1[j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">                c1[j] = c2[j];</span><br><span class="line">                c2[j] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; c1[n] &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="组合数学"><a href="#组合数学" class="headerlink" title="组合数学"></a>组合数学</h2><h3 id="盒子放小球问题"><a href="#盒子放小球问题" class="headerlink" title="盒子放小球问题"></a>盒子放小球问题</h3><p>$n$个小球，$m$个盒子。</p>
<h4 id="n个小球有区别，m个盒子有区别"><a href="#n个小球有区别，m个盒子有区别" class="headerlink" title="n个小球有区别，m个盒子有区别"></a>n个小球有区别，m个盒子有区别</h4><p>(1)允许空盒：每个球放到任意盒子里，总方案数$m^n$。</p>
<p>(2)不允许空盒：需满足$n \geq m\geq 1$ ，$m&gt;n$时无解。其方案数及时看成m个盒子相同时的方案数，再乘以$m!$。答案即是$S(n,m)*m!$。S代表第二类斯特林数。</p>
<h4 id="n个小球有区别，m个盒子无区别"><a href="#n个小球有区别，m个盒子无区别" class="headerlink" title="n个小球有区别，m个盒子无区别"></a>n个小球有区别，m个盒子无区别</h4><p>(1)允许空盒：假设放了k个盒，$m\geq k\geq 1$。那么答案就 $\sum_{k=1}^{m}S(n,k)$。</p>
<p>(2)不允许有空盒：$S(n,m)$。</p>
<h4 id="n个小球无区别，m个盒子有区别"><a href="#n个小球无区别，m个盒子有区别" class="headerlink" title="n个小球无区别，m个盒子有区别"></a>n个小球无区别，m个盒子有区别</h4><p>(1)允许空盒：$n\geq m\geq 1$。“隔板法”。假设不允许有空盒，每一个盒里都先放一个小球，这样小球共有$n+m$个，然后插板，插板的方案数为 $C^{n-1}_{n+m-1}$ 。</p>
<p>(2)不允许空盒： $n\geq m\geq 1$ 。“隔板法”。方案数 $C^{m-1}_{n-1}$ 。</p>
<h4 id="n个小球无区别，m个盒子无区别"><a href="#n个小球无区别，m个盒子无区别" class="headerlink" title="n个小球无区别，m个盒子无区别"></a>n个小球无区别，m个盒子无区别</h4><p>(1) 允许空盒：划分数问题。<br>$dp[i][j]$表示i个球，j个盒子的方案数。转移方程为</p>
<p>$dp[i][j]=dp[i-j][j]+dp[i][j-1] (i\geq j)$</p>
<p>$dp[i][j]=dp[i][j-1] (i&lt; j)$</p>
<p>如果$n&lt;m$，答案为$dp[n][n]$，否则为 $dp[n][m]$。</p>
<p>(2)不允许空盒：<br>$n\geq m\geq 1$。转成上情况的$n-m$个小球，$m$个盒子。</p>
<h3 id="计数原理与计数公式"><a href="#计数原理与计数公式" class="headerlink" title="计数原理与计数公式"></a>计数原理与计数公式</h3><h4 id="可重复的排列与组合"><a href="#可重复的排列与组合" class="headerlink" title="可重复的排列与组合"></a>可重复的排列与组合</h4><h5 id="可重复的排列"><a href="#可重复的排列" class="headerlink" title="可重复的排列"></a>可重复的排列</h5><p>从n个不同元素中取m个元素（同一元素可以重复取出），按照一定的顺序排成一列。排列的个数为 $n^m$。</p>
<h5 id="可重复的组合"><a href="#可重复的组合" class="headerlink" title="可重复的组合"></a>可重复的组合</h5><p>从n个不同元素中取m个元素（同一元素可以重复取出），并成一组。组合的个数为 $C^{m}_{n+m-1}$。</p>
<p>【证明】</p>
<p>$1,2,…,n$表示n个不同元素。从中取m个可以表示成：</p>
<p>${i_1,i_2,…,i_m} (1\leq i_1\leq i_2 \leq … \leq i_m \leq n)$</p>
<p>令$j_k = i_k + (k-1)$，即：</p>
<p>$\begin{aligned}j_1 &amp;= i_1\<br>j_2 &amp;= i_2+ 1\<br>j_3 &amp;= i_3 + 2\<br>…\<br>j_m &amp;=i_m+(m-1)<br>\end{aligned}$</p>
<p>可以得到组合</p>
<p>${j_1,j_2,…,j_m} (1\leq j_1&lt; j_2 &lt; … &lt;j_m \leq n-m+1)$</p>
<p>这样就相当于在$n+m-1$个元素中取$m$个不相同的元素，作为一组。</p>
<p>因此即是 $C_{n+m-1}^{m}$。</p>
<h5 id="不全相异元素的全排列"><a href="#不全相异元素的全排列" class="headerlink" title="不全相异元素的全排列"></a>不全相异元素的全排列</h5><p>n个元素中，分别有$n_1,n_2,…,n_k$个元素相同，且$n_1+n_2+…+n_k=n$，则称这n个元素的全排列为不全相异元素的全排列，个数为 $\frac{n!}{n_1!n_2!…n_k!}$</p>
<h5 id="多组组合"><a href="#多组组合" class="headerlink" title="多组组合"></a>多组组合</h5><p>n个相异的元素分为$k(k\leq n)$个按照<strong>一定顺序</strong>排列的组，其中第$i$组有$n_i$个元素 $(i=1,2,…,k)(n_1+n_2+…+n_k=n)$。<br>不同的分组方法为 $\frac{n!}{n_1!n_2!…n_k!}$</p>
<p>【例】</p>
<p>从 $n(n\geq 6)$ 个选手中选3对选手参加双打，问共有多少种选法。</p>
<p>答案为（注意不考虑<strong>组的顺序</strong>）<br>$\frac{C_{n}^{6}*\frac{6!}{2!*2!*2!}}{3!}$</p>
<h4 id="相异元素的圆排列和项链数"><a href="#相异元素的圆排列和项链数" class="headerlink" title="相异元素的圆排列和项链数"></a>相异元素的圆排列和项链数</h4><h5 id="圆排列"><a href="#圆排列" class="headerlink" title="圆排列"></a>圆排列</h5><p>n个元素不分首尾排成一圈，成为n个相异元素的圆排列。排列的种数为$(n-1)!$。</p>
<h5 id="项链数"><a href="#项链数" class="headerlink" title="项链数"></a>项链数</h5><p>将n粒不相同的珠子，穿成一副项链，得到的不同的项链数。<br>由于项链顺时针和逆时针都是相同的，所以个数即是圆排列的一半。</p>
<p>$\left{<br>\begin{aligned}<br>&amp;1,n = 1或n=2\<br>&amp;\frac{1}{2}*(n-1)!,n\geq3<br>\end{aligned}<br>\right.$</p>
<h4 id="错排问题"><a href="#错排问题" class="headerlink" title="错排问题"></a>错排问题</h4><p>错排递推式。</p>
<p>$D(n)$代表$n$个数的错排公式，则<br>$D(n) = (n-1)*[D(n-1)+D(n-2)]$</p>
<p>错排公式</p>
<p>$D(n) = n!(1-\frac{1}{1!}+\frac{1}{2!}-\frac{1}{3!}+…+\frac{(-1)^n}{n!})$</p>
<h3 id="组合数常用公式"><a href="#组合数常用公式" class="headerlink" title="组合数常用公式"></a>组合数常用公式</h3><p>$\begin{aligned}<br>&amp;C_{n}^{2} = \frac{n*(n-1)}{2}\<br>&amp;\<br>&amp;C_{n}^{3}=\frac{n*(n-1)(n-2)}{6}\<br>&amp;\<br>&amp;C_{n}^{m}=C_{n-1}^{m-1}+C_{n-1}^{m}\<br>&amp;\<br>&amp;m<em>C_{n}^{m} = n</em>C_{n-1}^{m-1}\<br>&amp;\<br>&amp;C_n^0+C_n^1+…+C_n^n =2^n\<br>&amp;\<br>&amp;1C_n^1+2C_n^2+…+nC_n^n=n2^{n-1}\<br>&amp;\<br>&amp;1^2C_n^1+2^2C_n^2+…+n^2C_n^n=n(n+1)2^{n-2}\<br>&amp;\<br>&amp;\frac{C_n^1}{1}-\frac{C_n^2}{2}+\frac{C_n^3}{3}+…+(-1)^{n-1}\frac{C_n^n}{n}=1+\frac{1}{2}+\frac{1}{3}+…+\frac{1}{n}\<br>&amp;\<br>&amp;(C_n^0)^2+(C_n^1)^2+(C_n^2)^2+…+(C_n^n)^2=C_{2n}^n\<br>\end{aligned}$</p>
<p>范德蒙恒等式:<br>$\sum_{i=0}^{k}C_n^iC_m^{k-i}=C_{n+m}^k$</p>
<p>经验式<br>(link<br>  [<a href="https://www.cnblogs.com/qrsikno/p/10170523.html]">https://www.cnblogs.com/qrsikno/p/10170523.html]</a><br>  (<a href="https://www.cnblogs.com/qrsikno/p/10170523.html">https://www.cnblogs.com/qrsikno/p/10170523.html</a>)<br>  ):</p>
<p>$\begin{aligned}<br>&amp;\sum_{i=0}^{n}C_n^i<em>r^i=(r+1)^n（广义二项式定理）\<br>&amp;\<br>&amp;\sum_{i=0}^{n}i</em>C_n^i=n*2^{n-1}\&amp;\<br>&amp;\sum_{i=0}^{n}C_i^k=C_{n+1}^{k+1}\&amp;\<br>&amp;\sum_{i=0}^{k}C_{n+i}^i=C_{n+k+1}^{k}\<br>\end{aligned}$</p>
<h3 id="抽屉原理与平均值原理"><a href="#抽屉原理与平均值原理" class="headerlink" title="抽屉原理与平均值原理"></a>抽屉原理与平均值原理</h3><h4 id="抽屉原理"><a href="#抽屉原理" class="headerlink" title="抽屉原理"></a>抽屉原理</h4><h5 id="第一抽屉原理"><a href="#第一抽屉原理" class="headerlink" title="第一抽屉原理"></a>第一抽屉原理</h5><p>如果将m个物件放入n个抽屉内，那么必有一个抽屉内至少有$[\frac{m-1}{n}]+1$个物件。</p>
<p>【推广】</p>
<p>如果将$m_1+m_2+…+m_n+1$个物件放入n个抽屉内，那么或者第一个抽屉内至少有$m_1+1$个物件，或者第二个抽屉内至少有$m_2+1$个物件……或者第n个抽屉内至少有$m_n+1$个物件。</p>
<h5 id="第二抽屉原理"><a href="#第二抽屉原理" class="headerlink" title="第二抽屉原理"></a>第二抽屉原理</h5><p>如果将m个物件放入n个抽屉内，那么必有一个抽屉内至多有$[\frac{m}{n}]$个物件。</p>
<p>【推广】</p>
<p>如果将$m_1+m_2+…+m_n-1$个物件放入n个抽屉内，那么或者第一个抽屉内至多有$m_1-1$个物件，或者第二个抽屉内至多有$m_2-1$个物件……或者第n个抽屉内至多有$m_n-1$个物件。</p>
<h4 id="平均值原理"><a href="#平均值原理" class="headerlink" title="平均值原理"></a>平均值原理</h4><p>（1）设$a_1,a_2,…,a_n$是实数，$A =\frac{1}{n}(a_1+a_2+…+a_n)$，则$a_1,a_2,…,a_n$中必有一个数不小于A，也有一个数不大于A。</p>
<p>（2）设$a_1,a_2,…,a_n$是实数，$G =\frac{1}{n}\sqrt[n]{a_1a_2…a_n}$，则$a_1,a_2,…,a_n$中必有一个数不小于G，也有一个数不大于G。</p>
<h3 id="生成函数"><a href="#生成函数" class="headerlink" title="生成函数"></a>生成函数</h3><p>生成函数的定义：</p>
<p>实数序列 $a_0,a_1,…,a_k,…$的生成函数是无穷级数</p>
<p>$G(x)=a_0+a_2x+…+a_kx^k+…=\sum_{k=0}^{\infty}a_kx^k$</p>
<p>${a_k}$的普通生成函数。</p>
<p>广义二项式系数：</p>
<p>$\dbinom{u}{k}=\left { \begin{aligned}&amp;u(u-1)(u-2)…(u-k+1)/k!,&amp;k&gt;0\<br>&amp;1,&amp;k=0<br>\end{aligned}\right.$</p>
<p>【例】</p>
<p>$\begin{aligned}\dbinom{1/2}{3}&amp;=\frac{(1/2)(1/2-1)(1/2-2)}{3!}\<br> &amp;=\frac{(1/2)(-1/2)(-3/2)}{6}\<br> &amp;=1/16<br> \end{aligned}$</p>
<p>设$x$是实数，$|x|&lt;1$，$u$是实数，那么</p>
<p>$(1+x)^u=\sum_{k=0}^{\infty}\dbinom{u}{k}x^k$</p>
<h4 id="常用生成函数"><a href="#常用生成函数" class="headerlink" title="常用生成函数"></a>常用生成函数</h4><p>$\begin{aligned}<br>&amp;\frac{1-x^{n+1}}{1-x}=\sum_{k=0}^{n}x^k\<br>&amp;\<br>&amp;\frac{1}{1-ax}=\sum_{k=0}^{\infty}a^kx^k\<br>&amp;\<br>&amp;\frac{1}{(1-x)^2}=\sum_{k=0}^{\infty}(k+1)x^k\<br>&amp;\<br>&amp;\frac{1}{(1-x)^n}=\sum_{k=0}^{\infty}C_{n+k-1}^{k}x^k\<br>&amp;\<br>&amp;\frac{1}{(1+x)^n}=\sum_{k=0}^{\infty}C_{n+k-1}^{k}(-1)^kx^k\<br>\end{aligned}$</p>
<h3 id="特殊计数序列"><a href="#特殊计数序列" class="headerlink" title="特殊计数序列"></a>特殊计数序列</h3><h4 id="Catalan数列"><a href="#Catalan数列" class="headerlink" title="Catalan数列"></a>Catalan数列</h4><p>前几项：$1, 1, 2, 5, 14, 42, 132, 429, 1430, 4862, 16796, 58786, 208012, ……$即$c[0]=1,c[1]=1,c[2]=2…$</p>
<p>$\begin{aligned}<br>&amp;递推式1：f[n]=\sum_{i=0}^{n-1}f[i]*f[n-i-1]\<br>&amp;\<br>&amp;递推式2：f[n]=\frac{4n-2}{n+1}f[n-1]\<br>&amp;\<br>&amp;组合式1：f[n]=\frac{C_{2n}^{n}}{n+1}\<br>&amp;\<br>&amp;组合式2：f[n] = C_{2n}^{n}-C_{2n}^{n-1}<br>\end{aligned}$</p>
<p>应用：</p>
<ol>
<li>二叉树计数1：已知二叉树有$n$个节点，能够构成$C_{n}$种不同的二叉树。（二叉搜索树）</li>
<li>二叉树计数2：已知二叉树的叶子$n$个，能够构成$C_{n-1}$种不同的二叉树。（二叉搜索树）</li>
<li>括号匹配数：一个合法的表达式由()包围，()可以嵌套和连接，给出$n$对括号，可以组成的合法表达式的个数为$C_{n}$。</li>
<li>划分问题：将一个凸$n+2$多边形区域分成三角形区域的方法数为$C_{n}$。</li>
<li>出栈问题1：一个栈的进栈序列为$1,2,3,..n$，不同的出栈序列有$C_{n}$种。</li>
<li>出栈问题2：有2n个人排成一行进入剧场。入场费5元。其中只有n个人有一张5元钞票，另外n人只有10元钞票，剧院无其它钞票，问有多少种方法使得只要有10元的人买票，售票处就有5元的钞票找零。5元的相当于入栈，10元的相当于出栈，转化成上问题。</li>
<li>路径问题：在$n*n$的方格地图中，从一个角到另外一个角，不跨越对角线的路径数有$C_{n}$种。</li>
<li>握手问题：$2n$个人均匀坐在一个圆桌边上，某个时刻所有人同时与另一个人握手，要求手之间不能交叉，共有$C_{n}$种握手方法。</li>
</ol>
<h4 id="Fibonacci数列"><a href="#Fibonacci数列" class="headerlink" title="Fibonacci数列"></a>Fibonacci数列</h4><p>通项公式：$F_n=\frac{1}{\sqrt{5}}[(\frac{1+\sqrt{5}}{2})^n-(\frac{1-\sqrt{5}}{2})^n]$</p>
<p>递推式：</p>
<p>$F_n=F_{n-1}+F_{n-2}$</p>
<p>性质：</p>
<p>$\begin{aligned}&amp;F_1+F_1+F_2+F_3+…+F_n=F_{n+2}-1\<br>&amp;\<br>&amp;F_1+2F_2+3F_3+…+nF_n=nF_{n+2}-F_{n+3}+2\<br>&amp;\<br>&amp;F_1+F_3+F_5+…+F_{2n-1}=F_{2n}\<br>&amp;\<br>&amp;F_2+F_4+F_6+…+F_{2n}=F_{2n+1}-1\<br>&amp;\<br>&amp;F_1^2+F_2^2+F_3^2+…+F_n^2=F_nF_{n+1}\<br>&amp;\<br>&amp;F_{n-1}F_{n+1}-F_n^2=(-1)^n<br>\end{aligned}$</p>
<p>定理：</p>
<p>$\begin{aligned}<br>&amp;F_nF_m+F_{m-1}F_{n-1}=F_{m+n-1}\<br>&amp;\<br>&amp;F_mF_{n+1}+F_{m-1}F_n=F_{m+n}\<br>&amp;\<br>&amp;m=n时，\<br>&amp;F_{2n-1}=F_n^2+F_{n-1}^2\<br>&amp;\<br>&amp;F_{2n}=(F_{n-1}+F_{n+1})F_n=(2F_{n-1}+F_n)F_n\<br>&amp;\<br>&amp;F_n整除F_m当且仅当n整除m，其中n\geq3\<br>&amp;\<br>&amp;任意连续三个Fibonacci数两两互素。<br>\end{aligned}$</p>
<h4 id="Lucas数列"><a href="#Lucas数列" class="headerlink" title="Lucas数列"></a>Lucas数列</h4><p>定义：</p>
<p>$L_n=<br>\left{\begin{aligned}&amp;2,&amp;n=1\<br>&amp;1,&amp;n=2\<br>&amp;L_{n-1}+L_{n-2},&amp;n\geq3<br>\end{aligned}<br>\right.$</p>
<p>通项公式：</p>
<p>$L_n=(\frac{1+\sqrt{5}}{2})^n+(\frac{1-\sqrt{5}}{2})^n$</p>
<p>与Fibonacci数的关系：</p>
<p>$\begin{aligned}<br>&amp;F_{2n}=L_nF_n\<br>&amp;\<br>&amp;L_n=F_{n-1}+F_{n+1}\<br>&amp;\<br>&amp;F_n=\frac{L_{n-1}+L_{n+1}}{5}\<br>&amp;\<br>&amp;L_n^2=5F_n^2+4(-1)^n<br>\end{aligned}$</p>
<h4 id="Stirling数"><a href="#Stirling数" class="headerlink" title="Stirling数"></a>Stirling数</h4><h5 id="第一类Stirling数"><a href="#第一类Stirling数" class="headerlink" title="第一类Stirling数"></a>第一类Stirling数</h5><p>$S1(n,m)$表示的是将$n$个不同元素构成$m$个圆排列的数目。</p>
<p>递推式：</p>
<p>$S1(n,m)=(n-1)*S1(n-1,m)+S1(n-1,m-1)(n&gt;1,m&gt;1)$</p>
<p>边界条件：</p>
<p>$\begin{aligned}<br>&amp;S1(0,0)=1,S1(n,0) = 0\<br>&amp;S1(n,n) = 1<br>\end{aligned}$</p>
<p>性质：</p>
<p>$\sum_{k=0}^{n}S1(n,k)=n!$</p>
<p>【例】$n$个仓库， $2n$把钥匙，$n$ 位官员。如果把$n$位官员分成$m$个不同的部，部中的官员数量与管理的仓库数量一致。有多少种方案使得所有同部的官员可以打开所有本部管理的仓库，而无法打开其他管理的仓库。（$n$把钥匙放到仓库，$n$把钥匙分给官员）<br>方案数即为$S1(n,m)n!$。</p>
<p>前面的是放到仓库里的方案数，后面说官员的分配方案。</p>
<h5 id="第二类Stirling数"><a href="#第二类Stirling数" class="headerlink" title="第二类Stirling数"></a>第二类Stirling数</h5><p>$S2(n,m)$表示的是把$n$个不同元素划分到$m$个集合的方案数。</p>
<p>递推式：</p>
<p>$S2(n,m)=m*S2(n-1,m)+S2(n-1,m-1)(1\leq m\leq n-1)$</p>
<p>边界条件：</p>
<p>$\begin{aligned}<br>&amp;S2(n,0)=0,S2(n,1)=1\<br>&amp;S2(n,n)=1<br>\end{aligned}$</p>
<h2 id="博弈问题"><a href="#博弈问题" class="headerlink" title="博弈问题"></a>博弈问题</h2><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p>[<a href="https://blog.csdn.net/weixin_38686780/article/details/82940573]">https://blog.csdn.net/weixin_38686780/article/details/82940573]</a><br>(<a href="https://blog.csdn.net/weixin_38686780/article/details/82940573">https://blog.csdn.net/weixin_38686780/article/details/82940573</a>)<br>[<a href="https://blog.csdn.net/qq_41552508/article/details/89159952]">https://blog.csdn.net/qq_41552508/article/details/89159952]</a><br>(<a href="https://blog.csdn.net/qq_41552508/article/details/89159952">https://blog.csdn.net/qq_41552508/article/details/89159952</a>)<br><a href="https://www.zhihu.com/question/27467617">https://www.zhihu.com/question/27467617</a></p>
<h3 id="平等博弈"><a href="#平等博弈" class="headerlink" title="平等博弈"></a>平等博弈</h3><h4 id="常见概念及定理"><a href="#常见概念及定理" class="headerlink" title="常见概念及定理"></a>常见概念及定理</h4><h5 id="组合游戏"><a href="#组合游戏" class="headerlink" title="组合游戏"></a>组合游戏</h5><p>公平组合游戏ICG – Impartial Combinatorial Games<br>游戏的胜负仅仅取决于当前状态，与谁在玩没有关系。</p>
<p>判定：</p>
<ol>
<li>2人博弈</li>
<li>当前状态的下一个状态的个数有限</li>
<li>每个状态，两人操作集合相同</li>
<li>交替移动</li>
<li>一个人不能移动就为输</li>
<li>有限步内终止<h5 id="P状态与N状态"><a href="#P状态与N状态" class="headerlink" title="P状态与N状态"></a>P状态与N状态</h5>P - 必败态<br>N - 必胜态</li>
<li>所有终止的状态是P状态</li>
<li>能一步到达P状态的是N状态</li>
<li>每一步都将到达N状态的为P状态</li>
</ol>
<h5 id="SG函数和SG定理"><a href="#SG函数和SG定理" class="headerlink" title="SG函数和SG定理"></a>SG函数和SG定理</h5><p>sg函数值的意义，如果$sg(x)=0$，那么x是必败态，否则x是必胜态。<br>定义：$sg(x)=min{n\geq 0|n=sg(y),y\in  F(x)}$</p>
<p>$F(x)$表示x所有的下一个状态的集合。</p>
<p>定义mex函数为不在一个集合里的最小非负整数。则</p>
<p>$sg(x)=mex{sg(y)|y\in F(x)}$</p>
<p>SG定理：</p>
<p>$sg(x_1,x_2,…,x_n)=sg(x_1) \oplus sg(x_2)\oplus … \oplus sg(x_n)$</p>
<p>求sg函数代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">5e4</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//f[i]代表可行的转移方式 k代表方式总数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> f[maxn], k, sg[maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getsg</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(sg, <span class="number">0</span>, <span class="keyword">sizeof</span> sg);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span> vis);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; f[j] &lt;= i &amp;&amp; j &lt;= k; ++j) &#123;</span><br><span class="line">            vis[sg[i - f[j]]] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>;; ++j)</span><br><span class="line">            <span class="keyword">if</span> (!vis[j]) &#123;</span><br><span class="line">                sg[i] = j;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="常见模型"><a href="#常见模型" class="headerlink" title="常见模型"></a>常见模型</h4><h5 id="巴什博弈"><a href="#巴什博弈" class="headerlink" title="巴什博弈"></a>巴什博弈</h5><p>一堆n个物品，每人每次轮流从中取出$1 - m$个，最后取光者胜。<br>结论：如果$n % (m+1)==0$那么后手胜，否则先手获胜。</p>
<h5 id="nim博弈"><a href="#nim博弈" class="headerlink" title="nim博弈"></a>nim博弈</h5><p>两个人玩取石子游戏，共有N堆石子，每个人每次可以从一堆石子里面任意多个石子，最后取光者胜。<br>结论：亦或和为0先手必败，否则先手必胜。</p>
<p>阶梯nim：n级台阶，每级台阶上放有石子。每人每次选一级台阶上的若干石子移到下一层。第0层为地面。不能移动的为输。<br>结论：奇数级台阶的亦或和为0先手必败，否则先手必胜。</p>
<h5 id="反nim博弈"><a href="#反nim博弈" class="headerlink" title="反nim博弈"></a>反nim博弈</h5><p>将nim改为最后取的人输。<br>必胜态有两种：</p>
<ol>
<li>所有石堆个数都是1,且有偶数堆。</li>
<li>如果存在某堆个数不为1,那么亦或和不为0。<h5 id="威佐夫博弈"><a href="#威佐夫博弈" class="headerlink" title="威佐夫博弈"></a>威佐夫博弈</h5>两个人玩取石子游戏，共有2堆石子，每个人可以选择从一堆石子里面取石子，也可以选择从两堆石子里面取相同数量的石子，最后取光者胜。<br>结论：必败局势为(a,b)(a&lt;b)，满足<br>$a=(int)(b-a)*\frac{\sqrt{5}+1}{2}$</li>
</ol>
<p>代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (x &gt; y)<span class="built_in">swap</span>(x, y);</span><br><span class="line">      <span class="keyword">double</span> r = (<span class="built_in">sqrt</span>(<span class="number">5.0</span>) + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">      <span class="keyword">if</span> ((<span class="keyword">int</span>) ((<span class="keyword">double</span>) (y - x) * r) == x)cout &lt;&lt; <span class="string">&quot;houshou&quot;</span> &lt;&lt; endl;</span><br><span class="line">      <span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;xianshou&quot;</span> &lt;&lt; endl;</span><br></pre></td></tr></table></figure>
<h5 id="Moore’s-Nimk"><a href="#Moore’s-Nimk" class="headerlink" title="Moore’s Nimk"></a>Moore’s Nimk</h5><p>两个人玩取石子游戏，共有N堆石子，每个人每次可以从至多k堆石子里面任意多个石子，最后取光者胜。<br>结论：把n堆石子的石子数用二进制表示，统计每个二进制位上1的个数，若每一位上1的个数mod(k+1)全部为0，则必败。</p>
<h5 id="Fibonacci博弈"><a href="#Fibonacci博弈" class="headerlink" title="Fibonacci博弈"></a>Fibonacci博弈</h5><p>1堆石子有n个,两人轮流取。先取者第1次可以取任意多个，但不能全部取完。以后每次取的石子数不能超过上次取子数的2倍。最后取光者胜。<br>结论：先手必胜当且仅当识字数n不是Fibonacci数。</p>
]]></content>
      <tags>
        <tag>ACM</tag>
      </tags>
  </entry>
</search>
